[build-system]
requires = ["setuptools>=70", "wheel>=0.44", "build>=1.2.1", "Cython>=0.29.36", "numpy>=1.21"]
build-backend = "setuptools.build_meta"

[project]
name = "rmnpy"
version = "0.1.12"
description = "Python bindings for OCTypes, SITypes, and RMNLib C libraries for scientific computing with units and dimensional analysis"
readme = "README.md"
license = {text = "MIT"}
authors = [{name = "Philip Grandinetti", email = "grandinetti.1@osu.edu"}]
maintainers = [{name = "Philip Grandinetti", email = "grandinetti.1@osu.edu"}]
keywords = ["scientific-computing","units","dimensional-analysis","nmr","spectroscopy","physics","chemistry","c-extensions","cython"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: C",
  "Programming Language :: Cython",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed"
]
requires-python = ">=3.11"
dependencies = [
  "numpy>=1.23; python_version=='3.11'",
  "numpy>=1.26; python_version>='3.12'",
]

[project.optional-dependencies]
dev = ["pytest>=6.2.0","pytest-cov>=2.12.0","pytest-xdist>=2.4.0","black>=21.0.0","isort>=5.9.0","flake8>=3.9.0","mypy>=0.910","pre-commit>=2.15.0"]
docs = ["sphinx>=3.1.0","sphinx-rtd-theme>=0.5.2","breathe>=4.13.0","myst-parser>=0.15.0","sphinx-copybutton>=0.3.0"]
test = ["pytest>=6.2.0","pytest-cov>=2.12.0","pytest-xdist>=2.4.0","pytest-benchmark>=3.4.0"]
all = ["rmnpy[dev,docs,test]"]

[project.urls]
Homepage = "https://github.com/pjgrandinetti/RMNpy"
Documentation = "https://rmnpy.readthedocs.io"
Repository = "https://github.com/pjgrandinetti/RMNpy"
"Source Code" = "https://github.com/pjgrandinetti/RMNpy"
"Bug Reports" = "https://github.com/pjgrandinetti/RMNpy/issues"
"Changelog" = "https://github.com/pjgrandinetti/RMNpy/blob/master/CHANGELOG.md"
"CI/CD" = "https://github.com/pjgrandinetti/RMNpy/actions"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Ensure bundled shared libs (and typing marker) are included
[tool.setuptools.package-data]
rmnpy = ["_libs/*", "py.typed"]

[tool.cython]
language_level = 3
embedsignature = true
boundscheck = false
wraparound = false
initializedcheck = false

[tool.black]
line-length = 88
target-version = ['py38','py39','py310','py311','py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs|\.git|\.hg|\.mypy_cache|\.pytest_cache|\.tox|\.venv|build|dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["rmnpy"]
force_grid_wrap = 0
combine_as_imports = true
include_trailing_comma = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = ["setup.py"]

[[tool.mypy.overrides]]
module = ["numpy.*","cython.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra","--strict-markers","--strict-config","--cov=rmnpy","--cov-report=term-missing","--cov-report=html","--cov-report=xml"]
testpaths = ["tests/test_helpers","tests/test_sitypes","tests/test_rmnlib","tests/test_math.py"]
python_files = ["test_*.py","*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
  "memory: marks tests that check memory management",
  "performance: marks tests that benchmark performance",
]

[tool.coverage.run]
source = ["src/rmnpy"]
omit = ["*/tests/*","*/test_*","*/__pycache__/*","*/build/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover","def __repr__","if self.debug:","if settings.DEBUG",
  "raise AssertionError","raise NotImplementedError","if 0:",
  "if __name__ == .__main__.:","class .*\\bProtocol\\):","@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.pre-commit]
# configured in .pre-commit-config.yaml
