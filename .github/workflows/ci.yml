name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"

    steps:
    - name: Checkout RMNpy
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake flex bison openblas lapack curl

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-make
          mingw-w64-x86_64-pkg-config
          flex
          bison

    - name: Download OCTypes from GitHub releases
      run: |
        mkdir -p lib include/OCTypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libOCTypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libOCTypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/${LIB_FILE} -o octypes-lib.zip
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/libOCTypes-headers.zip -o octypes-headers.zip
        unzip -o -j -q octypes-lib.zip -d lib/
        unzip -o -j -q octypes-headers.zip -d include/OCTypes/
        rm octypes-lib.zip octypes-headers.zip
      shell: bash

    - name: Download SITypes from GitHub releases
      run: |
        mkdir -p include/SITypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libSITypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libSITypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/${LIB_FILE} -o sitypes-lib.zip
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/libSITypes-headers.zip -o sitypes-headers.zip
        unzip -o -j -q sitypes-lib.zip -d lib/
        unzip -o -j -q sitypes-headers.zip -d include/SITypes/
        rm sitypes-lib.zip sitypes-headers.zip
      shell: bash

    - name: Download RMNLib from GitHub releases
      run: |
        mkdir -p include/RMNLib
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libRMN-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libRMN-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libRMN-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/${LIB_FILE} -o rmnlib-lib.zip
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/libRMN-headers.zip -o rmnlib-headers.zip
        unzip -o -j -q rmnlib-lib.zip -d lib/
        unzip -o -j -q rmnlib-headers.zip -d include/RMNLib/
        rm rmnlib-lib.zip rmnlib-headers.zip
      shell: bash

    - name: Verify downloaded libraries
      run: |
        ls -la lib/
        ls -la include/
        echo "âœ“ Libraries downloaded and ready for Python build"
      shell: bash

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .[test]

    - name: Generate constants
      run: |
        make generate-constants

    - name: Create directories for in-place build
      run: |
        mkdir -p rmnpy/helpers rmnpy/wrappers/sitypes rmnpy/_c_api
        # Copy essential Python modules needed for in-place builds
        cp src/rmnpy/exceptions.py rmnpy/
        cp -r src/rmnpy/_c_api/ rmnpy/
        # Create __init__.py files with proper content
        cat > rmnpy/helpers/__init__.py << 'EOF'
        """RMNpy helpers module"""
        try:
            from .octypes import *
        except ImportError:
            pass
        EOF

        cat > rmnpy/wrappers/__init__.py << 'EOF'
        """RMNpy wrappers module"""
        from . import sitypes
        __all__ = ["sitypes"]
        EOF

        cat > rmnpy/wrappers/sitypes/__init__.py << 'EOF'
        """SITypes Python wrappers"""
        from .dimensionality import Dimensionality
        from .unit import Unit
        from .scalar import Scalar
        __all__ = ["Dimensionality", "Unit", "Scalar"]
        EOF

        cat > rmnpy/__init__.py << 'EOF'
        """RMNpy: Python bindings for OCTypes, SITypes, and RMNLib"""
        __version__ = "0.1.0"
        from .wrappers.sitypes import Dimensionality, Unit, Scalar
        from .exceptions import RMNError
        EOF
      shell: bash

    - name: Build extensions in-place
      run: |
        # Ensure setuptools is available for direct setup.py calls
        python -m pip install setuptools
        python setup.py build_ext --inplace
        # Copy compiled extensions to the in-place build directory
        cp src/rmnpy/helpers/*.so rmnpy/helpers/ 2>/dev/null || true
        cp src/rmnpy/wrappers/sitypes/*.so rmnpy/wrappers/sitypes/ 2>/dev/null || true

    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=rmnpy --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint and style checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only the linting tools, not the full package
        python -m pip install black>=21.0.0 isort>=5.9.0 flake8>=3.9.0

    - name: Run black
      run: |
        python -m black --check --diff src/ tests/

    - name: Run isort
      run: |
        python -m isort --check-only --diff src/ tests/

    - name: Run flake8
      run: |
        python -m flake8 src/ tests/

  docs:
    name: Documentation build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev

    - name: Create stub libraries for docs
      run: |
        bash scripts/ci_stub_libs.sh || echo "Stub creation failed, creating minimal directories"
        mkdir -p lib include/OCTypes include/SITypes include/RMNLib

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only documentation dependencies, not the full package
        python -m pip install sphinx>=3.1.0 sphinx-rtd-theme>=0.5.2 breathe>=4.13.0 myst-parser>=0.15.0 sphinx-copybutton>=0.3.0

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
