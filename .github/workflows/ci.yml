name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          # Windows MinGW builds: MSYS2 only provides Python 3.12 for MinGW
          # Following SpinOps approach - exclude older Python versions on Windows
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
    - name: Checkout RMNpy
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake flex bison openblas lapack curl

    - name: Setup MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-curl
          mingw-w64-x86_64-openblas
          mingw-w64-x86_64-lapack
          mingw-w64-x86_64-make

    - name: Verify MSYS2 packages installation (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "=== Verifying MSYS2 package installation ==="

        # Check curl installation
        echo "Checking curl:"
        if pacman -Q mingw-w64-x86_64-curl; then
          echo "✓ curl package installed"
          find /mingw64 -name "*curl*.dll" | head -5
        else
          echo "✗ curl package NOT installed"
        fi

        # Check OpenBLAS installation
        echo -e "\nChecking OpenBLAS:"
        if pacman -Q mingw-w64-x86_64-openblas; then
          echo "✓ OpenBLAS package installed"
          find /mingw64 -name "*blas*.dll" | head -5
        else
          echo "✗ OpenBLAS package NOT installed"
        fi

        # Check LAPACK installation
        echo -e "\nChecking LAPACK:"
        if pacman -Q mingw-w64-x86_64-lapack; then
          echo "✓ LAPACK package installed"
          find /mingw64 -name "*lapack*.dll" | head -5
        else
          echo "✗ LAPACK package NOT installed"
        fi

        # List key DLL files we'll need
        echo -e "\n=== Key DLL files available ==="
        ls -la /mingw64/bin/libcurl*.dll 2>/dev/null || echo "No curl DLLs found"
        ls -la /mingw64/bin/libopenblas*.dll 2>/dev/null || echo "No OpenBLAS DLLs found"
        ls -la /mingw64/bin/liblapack*.dll 2>/dev/null || echo "No LAPACK DLLs found"

        # Check for Fortran libraries (gfortran variants)
        echo -e "\n=== Fortran libraries available ==="
        ls -la /mingw64/bin/libgfortran*.dll 2>/dev/null || echo "No libgfortran DLLs found"
        ls -la /mingw64/lib/libgfortran*.a 2>/dev/null || echo "No libgfortran static libs found"
        ls -la /mingw64/lib/libgcc_s*.a 2>/dev/null || echo "No libgcc_s static libs found"

        # List all Fortran-related libraries
        echo -e "\n=== All Fortran-related files ==="
        find /mingw64 -name "*fortran*" -o -name "*gfortran*" 2>/dev/null | head -10

        # Check specific library directory structure
        echo -e "\n=== MinGW64 library directory structure ==="
        ls -la /mingw64/lib/libgcc* 2>/dev/null || echo "No libgcc files found"
        ls -la /mingw64/lib/libgfortran* 2>/dev/null || echo "No libgfortran files found"
        ls -la /mingw64/lib/libwinpthread* 2>/dev/null || echo "No libwinpthread files found"
        ls -la /mingw64/lib/libquadmath* 2>/dev/null || echo "No libquadmath files found"

    - name: Add MinGW64 to PATH (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $mingw = "${{ runner.temp }}\msys64\mingw64\bin"
        "${mingw}" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

    - name: Alias Python import library (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $pythonVersion = "${{ matrix.python-version }}"
        $versionNoDot = $pythonVersion.Replace(".", "")
        $lib = Join-Path $Env:RUNNER_TEMP "msys64\mingw64\lib\libpython$pythonVersion.dll.a"
        $dest = Join-Path $Env:RUNNER_TEMP "msys64\mingw64\lib\libpython$versionNoDot.dll.a"
        if (Test-Path $lib) { Copy-Item $lib $dest -Force }

    - name: Download OCTypes from GitHub releases
      run: |
        mkdir -p lib include/OCTypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libOCTypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libOCTypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/${LIB_FILE} -o octypes-lib.zip
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/libOCTypes-headers.zip -o octypes-headers.zip
        unzip -o -j -q octypes-lib.zip -d lib/
        unzip -o -j -q octypes-headers.zip -d include/OCTypes/
        rm octypes-lib.zip octypes-headers.zip
      shell: bash

    - name: Download SITypes from GitHub releases
      run: |
        mkdir -p include/SITypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libSITypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libSITypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/${LIB_FILE} -o sitypes-lib.zip
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/libSITypes-headers.zip -o sitypes-headers.zip
        unzip -o -j -q sitypes-lib.zip -d lib/
        unzip -o -j -q sitypes-headers.zip -d include/SITypes/
        rm sitypes-lib.zip sitypes-headers.zip
      shell: bash

    - name: Download RMNLib from GitHub releases
      run: |
        mkdir -p include/RMNLib
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libRMN-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libRMN-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libRMN-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/${LIB_FILE} -o rmnlib-lib.zip
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/libRMN-headers.zip -o rmnlib-headers.zip
        unzip -o -j -q rmnlib-lib.zip -d lib/
        unzip -o -j -q rmnlib-headers.zip -d include/RMNLib/
        rm rmnlib-lib.zip rmnlib-headers.zip
      shell: bash

    - name: Verify downloaded libraries
      run: |
        ls -la lib/
        ls -la include/
        echo "✓ Libraries downloaded and ready for Python build"
      shell: bash

    - name: Debug library downloads (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "=== Library Download Debug ==="
        Write-Host "Contents of lib directory:"
        Get-ChildItem lib -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  $($_.Name) - $($_.Length) bytes - Type: $($_.GetType().Name)"
        }

        Write-Host "Looking for DLL files specifically:"
        Get-ChildItem lib\*.dll -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  DLL: $($_.Name) - $($_.Length) bytes"
        }

        Write-Host "Looking for library files (.a, .lib):"
        Get-ChildItem lib\*.a, lib\*.lib -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  LIB: $($_.Name) - $($_.Length) bytes"
        }

        # Analyze dependencies of compiled extensions
        Write-Host "=== Analyzing Extension Dependencies ==="
        if (Get-Command objdump -ErrorAction SilentlyContinue) {
          Write-Host "Using objdump to analyze dependencies..."
          Get-ChildItem "src\rmnpy\**\*.pyd" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Dependencies for $($_.Name):"
            & objdump -p $_.FullName | Select-String "DLL Name:"
          }
        } else {
          Write-Host "objdump not available for dependency analysis"
        }

    - name: Install build tools
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip setuptools wheel Cython "numpy>=1.21,<2"

    - name: Install build tools (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
      run: |
        # Verify MinGW environment
        Write-Host "MinGW PATH: ${{ runner.temp }}\msys64\mingw64\bin"
        $env:PATH = "${{ runner.temp }}\msys64\mingw64\bin;$env:PATH"

        # Verify compiler availability
        & x86_64-w64-mingw32-gcc --version
        Write-Host "CC environment: $env:CC"
        Write-Host "CXX environment: $env:CXX"

        # Use GitHub Actions Python explicitly (not MSYS2 Python)
        & "$env:pythonLocation\python.exe" -m pip install --upgrade pip setuptools wheel Cython "numpy>=1.21,<2"

    - name: Build Cython extension in-place (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
        LDFLAGS: "-L${{ runner.temp }}/msys64/mingw64/lib"
        LIBS: "-lcurl -lopenblas -llapack"
        MINGW_LIB_DIR: "${{ runner.temp }}/msys64/mingw64/lib"
      run: |
        # Verify environment
        Write-Host "Build environment:"
        Write-Host "  CC: $env:CC"
        Write-Host "  CXX: $env:CXX"
        Write-Host "  PATH includes MinGW: $($env:PATH -like '*mingw64*')"
        Write-Host "  LDFLAGS: $env:LDFLAGS"
        Write-Host "  LIBS: $env:LIBS"
        Write-Host "  MINGW_LIB_DIR: $env:MINGW_LIB_DIR"

        # Use GitHub Actions Python explicitly for build with MinGW compiler
        & "$env:pythonLocation\python.exe" setup.py build_ext --inplace

    - name: Copy runtime DLLs (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $mingw = "${{ runner.temp }}\msys64\mingw64\bin"
        # Copy runtime DLLs to main package directory (SpinOps approach)
        $targetDir = "src/rmnpy"
        if (Test-Path $targetDir) {
          Write-Host "Copying DLLs to main package directory: $targetDir"

          # Copy MinGW runtime DLLs
          Copy-Item "$mingw\libgcc_s_seh-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libwinpthread-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libstdc++-6.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libgomp-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libquadmath-0.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libgfortran-5.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy curl DLLs (required by RMNLib)
          Write-Host "Copying curl dependencies..."
          Copy-Item "$mingw\libcurl-4.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libssl-3-x64.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libcrypto-3-x64.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libzstd.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libbrotlidec.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libbrotlicommon.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libnghttp2-14.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libidn2-0.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libssh2-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libunistring-5.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libintl-8.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libiconv-2.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy OpenBLAS DLLs (required by RMNLib)
          Write-Host "Copying OpenBLAS dependencies..."
          Copy-Item "$mingw\libopenblas.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\liblapack.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy Python runtime DLL (critical for .pyd imports)
          Write-Host "Copying Python runtime DLL..."
          $pythonDll = Get-ChildItem "$env:pythonLocation" -Filter "python*.dll" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($pythonDll) {
            Write-Host "  Found Python DLL: $($pythonDll.Name)"
            Copy-Item $pythonDll.FullName $targetDir\ -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "  No Python DLL found in $env:pythonLocation"
          }

          # Search for libpython3.12.dll specifically (required by objdump analysis)
          Write-Host "Searching for libpython3.12.dll in targeted locations..."
          $searchPaths = @(
            "$env:pythonLocation",
            "${{ runner.temp }}\msys64\mingw64\bin",
            "${{ runner.temp }}\msys64\mingw64\lib",
            "C:\hostedtoolcache\windows\Python",
            "C:\Python*",
            "C:\tools\Python*"
          )

          $libpython = $null
          foreach ($searchPath in $searchPaths) {
            if (Test-Path $searchPath) {
              Write-Host "  Checking: $searchPath"
              $found = Get-ChildItem $searchPath -Filter "libpython3.12.dll" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($found) {
                $libpython = $found
                break
              }
            }
          }

          if ($libpython) {
            Write-Host "  Found libpython3.12.dll: $($libpython.FullName)"
            Copy-Item $libpython.FullName $targetDir\ -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "  libpython3.12.dll not found system-wide"
          }

          # Copy C library DLLs to package directory
          Write-Host "Copying C library DLLs..."
          if (Test-Path "lib") {
            Write-Host "Contents of lib directory:"
            Get-ChildItem "lib" | ForEach-Object { Write-Host "  $($_.Name)" }
            Copy-Item "lib\*.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "lib\*.a" $targetDir\ -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "lib directory does not exist"
          }

          # Also copy to all wrapper subdirectories for better DLL resolution
          Get-ChildItem "$targetDir\wrappers" -Directory -ErrorAction SilentlyContinue | ForEach-Object {
            $subDir = $_.FullName
            Write-Host "Copying DLLs to $subDir"
            Copy-Item "$mingw\libgcc_s_seh-1.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libwinpthread-1.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libstdc++-6.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libcurl-4.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libopenblas.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            if (Test-Path "lib") {
              Copy-Item "lib\*.dll" $subDir\ -Force -ErrorAction SilentlyContinue
              Copy-Item "lib\*.a" $subDir\ -Force -ErrorAction SilentlyContinue
            }
          }

          # List what was copied
          Write-Host "DLLs copied to main directory:"
          Get-ChildItem $targetDir\*.dll | ForEach-Object { Write-Host "  $($_.Name)" }

          # Check the compiled extensions exist
          Write-Host "Compiled extensions:"
          Get-ChildItem "$targetDir\**\*.pyd" -Recurse | ForEach-Object {
            Write-Host "  $($_.Name) - $($_.Length) bytes"
          }
        } else {
          Write-Host "Main package directory not found: $targetDir"
        }

    - name: Install Python dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pip install -e .[test]

    - name: Install Python dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
        MINGW_LIB_DIR: "${{ runner.temp }}/msys64/mingw64/lib"
      run: |
        # Use GitHub Actions Python explicitly for pip install with MinGW compiler
        & "$env:pythonLocation\python.exe" -m pip install -e .[test]

    - name: Generate constants (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        make generate-constants

    - name: Generate constants (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Constants are generated during the Python build process as constants.pyx
        # Check for the generated constants file
        Write-Host "Checking for generated constants..."
        if (Test-Path "src/rmnpy/constants.pyx") {
          Write-Host "✓ Constants file exists: src/rmnpy/constants.pyx"
          $constantsContent = Get-Content "src/rmnpy/constants.pyx" -First 10
          Write-Host "Contents preview:"
          $constantsContent | ForEach-Object { Write-Host "  $_" }
        } else {
          Write-Host "⚠ Constants file not found - running manual generation"
          # Manually run the constants generation
          & "$env:pythonLocation\python.exe" scripts/extract_si_constants.py
        }
        Write-Host "Constants generation check completed"

    - name: Test basic imports (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
      run: |
        # Initialize control variables
        $global:importFailed = $false
        $global:windowsTestSkipped = $false
        $global:msys2Success = $false

        # Advanced Windows CI Access Violation Prevention
        $mingwBin = "${{ runner.temp }}\msys64\mingw64\bin"

        Write-Host "=== Advanced Windows CI Access Violation Prevention ==="
        Write-Host "Python executable: $env:pythonLocation\python.exe"
        Write-Host "MinGW bin directory: $mingwBin"

        # Enhanced environment setup
        $env:PYTHONDONTWRITEBYTECODE = "1"
        $env:PYTHONUNBUFFERED = "1"
        $env:PYTHONUTF8 = "1"
        $env:PYTHONPATH = "src"

        # Add comprehensive DLL paths
        $dllPaths = @(
            "${{ runner.temp }}\msys64\mingw64\bin",
            "src\rmnpy",
            "lib",
            "$env:pythonLocation",
            "$env:pythonLocation\DLLs",
            "$env:pythonLocation\Scripts"
        )

        foreach ($path in $dllPaths) {
            if (Test-Path $path) {
                $env:PATH = "$path;$env:PATH"
                Write-Host "Added to PATH: $path"
            }
        }

        # Test basic Python functionality
        Write-Host "Testing basic Python execution..."
        try {
            $pythonVersion = & "$env:pythonLocation\python.exe" --version
            Write-Host "[OK] Python version: $pythonVersion"
        } catch {
            Write-Host "[ERROR] Basic Python test failed: $_"
            exit 1
        }

        # Test numpy import
        Write-Host "Testing numpy import..."
        try {
            $numpyTest = & "$env:pythonLocation\python.exe" -c "import numpy; print(`'Numpy version:`', numpy.__version__)"
            Write-Host "[OK] $numpyTest"
        } catch {
            Write-Host "[ERROR] Numpy import failed: $_"
            exit 1
        }

        # Direct import test with comprehensive error monitoring
        Write-Host "Testing rmnpy import with enhanced monitoring..."

        # Initialize global state variables
        $global:importFailed = $false
        $global:msys2Success = $false
        $global:windowsTestSkipped = $false

        # Write import command to temporary script file to avoid PowerShell string truncation
        'import sys' | Out-File -FilePath "test_import.py" -Encoding utf8
        'sys.path.insert(0, "src")' | Out-File -FilePath "test_import.py" -Encoding utf8 -Append
        'import rmnpy' | Out-File -FilePath "test_import.py" -Encoding utf8 -Append
        'print("SUCCESS: rmnpy imported successfully")' | Out-File -FilePath "test_import.py" -Encoding utf8 -Append

        $process = Start-Process -FilePath "$env:pythonLocation\python.exe" -ArgumentList "test_import.py" -NoNewWindow -PassThru -Wait -RedirectStandardOutput "import_output.txt" -RedirectStandardError "import_error.txt"

        Write-Host "Import test process exit code: $($process.ExitCode)"

        # Display output
        if (Test-Path "import_output.txt") {
            $output = Get-Content "import_output.txt" -Raw -ErrorAction SilentlyContinue
            if ($output -and $output.Trim()) {
                Write-Host "=== Import Output ==="
                Write-Host $output
            }
        }

        if (Test-Path "import_error.txt") {
            $errorOutput = Get-Content "import_error.txt" -Raw -ErrorAction SilentlyContinue
            if ($errorOutput -and $errorOutput.Trim()) {
                Write-Host "=== Import Error ==="
                Write-Host $errorOutput
            }
        }

        # Check for access violation specifically
        if ($process.ExitCode -eq -1073741819) {
            Write-Host "DETECTED: Access violation (-1073741819)" -ForegroundColor Red

            # Analyze dependencies of compiled extensions with objdump
            Write-Host "=== Analyzing Extension Dependencies ===" -ForegroundColor Yellow
            $objdumpPath = "${{ runner.temp }}\msys64\mingw64\bin\objdump.exe"
            if (Test-Path $objdumpPath) {
                Get-ChildItem "src\rmnpy\**\*.pyd" -Recurse | ForEach-Object {
                    Write-Host "Dependencies for $($_.Name):"
                    $deps = & $objdumpPath -p $_.FullName 2>$null | Select-String "DLL Name:"
                    $deps | ForEach-Object {
                        $dllName = ($_ -split ":")[1].Trim()
                        $locations = @(
                            "${{ runner.temp }}\msys64\mingw64\bin\$dllName",
                            "src\rmnpy\$dllName",
                            "lib\$dllName",
                            "$env:pythonLocation\$dllName",
                            "C:\Windows\System32\$dllName",
                            "C:\Windows\SysWOW64\$dllName"
                        )
                        $found = $false
                        $foundLocation = ""
                        foreach ($loc in $locations) {
                            if (Test-Path $loc) {
                                $found = $true
                                $foundLocation = $loc
                                break
                            }
                        }
                        $status = if ($found) { "✓ Found at $foundLocation" } else { "✗ MISSING" }
                        Write-Host "    $dllName - $status"
                    }
                    Write-Host ""
                }
            } else {
                Write-Host "objdump not available for dependency analysis"
            }

            Write-Host "Attempting system DLL workaround for MinGW ABI compatibility..." -ForegroundColor Yellow

            # Enhanced system environment for MinGW-compiled extensions
            $originalPath = $env:PATH
            $env:PATH = "C:\Windows\System32;C:\Windows\SysWOW64;$mingwBin;src\rmnpy;$env:pythonLocation;$env:PATH"

            # Create enhanced DLL resolution script
            'import os' | Out-File -FilePath "test_system_compat.py" -Encoding utf8
            'import sys' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            'import ctypes' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            'from ctypes import wintypes' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '# Add DLL directories for better resolution' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            'if hasattr(os, "add_dll_directory"):' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '    try:' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            "        os.add_dll_directory(r'$mingwBin')" | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            "        os.add_dll_directory(r'src\rmnpy')" | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '        os.add_dll_directory(r"C:\Windows\System32")' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '        print("Enhanced DLL search paths configured")' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '    except Exception as e:' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '        print(f"DLL directory setup failed: {e}")' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '# Pre-load critical DLLs in correct order' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            'dll_order = [' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            "    r'$mingwBin\libgcc_s_seh-1.dll'," | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            "    r'$mingwBin\libwinpthread-1.dll'," | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            "    r'$mingwBin\libgfortran-5.dll'," | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            "    r'$mingwBin\libquadmath-0.dll'," | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            "    r'$mingwBin\libgomp-1.dll'" | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            ']' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            'for dll_path in dll_order:' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '    if os.path.exists(dll_path):' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '        try:' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '            ctypes.CDLL(dll_path)' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '            print(f"Pre-loaded: {os.path.basename(dll_path)}")' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '        except Exception as e:' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '            print(f"Failed to pre-load {dll_path}: {e}")' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            '' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            'sys.path.insert(0, "src")' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            'print("Attempting rmnpy import with system compatibility...")' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            'import rmnpy' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append
            'print("SUCCESS: rmnpy imported with system compatibility!")' | Out-File -FilePath "test_system_compat.py" -Encoding utf8 -Append

            $compatProcess = Start-Process -FilePath "$env:pythonLocation\python.exe" -ArgumentList "test_system_compat.py" -NoNewWindow -PassThru -Wait -RedirectStandardOutput "compat_output.txt" -RedirectStandardError "compat_error.txt"

            Write-Host "System compatibility test exit code: $($compatProcess.ExitCode)"

            if (Test-Path "compat_output.txt") {
                $compatOutput = Get-Content "compat_output.txt" -Raw -ErrorAction SilentlyContinue
                if ($compatOutput -and $compatOutput.Trim()) {
                    Write-Host "=== System Compatibility Output ==="
                    Write-Host $compatOutput
                }
            }

            if ($compatProcess.ExitCode -eq 0) {
                Write-Host "[WORKAROUND SUCCESS] System compatibility approach resolved the access violation" -ForegroundColor Green
                $global:importFailed = $false
            } else {
                Write-Host "[SYSTEM COMPAT FAILED] Trying MSYS2 Python fallback..." -ForegroundColor Yellow

                if (Test-Path "compat_error.txt") {
                    $compatError = Get-Content "compat_error.txt" -Raw -ErrorAction SilentlyContinue
                    if ($compatError -and $compatError.Trim()) {
                        Write-Host "=== System Compatibility Error ==="
                        Write-Host $compatError
                    }
                }

                # Try MSYS2 Python as fallback for better MinGW compatibility
                $msys2Python = "${{ runner.temp }}\msys64\mingw64\bin\python.exe"
                if (Test-Path $msys2Python) {
                    Write-Host "Attempting MSYS2 Python fallback for better MinGW ABI compatibility..." -ForegroundColor Cyan

                    # Install rmnpy in MSYS2 environment
                    $env:PATH = "${{ runner.temp }}\msys64\mingw64\bin;$originalPath"

                    # Copy built extensions to MSYS2 Python site-packages with proper structure
                    try {
                        $msys2SitePackages = & $msys2Python -c "import site; print(site.getsitepackages()[0])" 2>$null
                        if (-not $msys2SitePackages) {
                            # Fallback method for site-packages detection
                            $msys2SitePackages = & $msys2Python -c "import sys; import os; print(os.path.join(sys.prefix, 'Lib', 'site-packages'))" 2>$null
                        }
                    } catch {
                        Write-Host "Failed to detect MSYS2 site-packages directory"
                        $msys2SitePackages = $null
                    }

                    if ($msys2SitePackages -and (Test-Path $msys2SitePackages)) {
                        Write-Host "MSYS2 site-packages: $msys2SitePackages"
                        $targetPath = Join-Path $msys2SitePackages "rmnpy"
                        if (!(Test-Path $targetPath)) {
                          New-Item -ItemType Directory -Path $targetPath -Force | Out-Null
                        }

                        # Copy all Python module files and compiled extensions
                        Copy-Item "src\rmnpy\*.py" $targetPath -Force -ErrorAction SilentlyContinue
                        Copy-Item "src\rmnpy\*.pyd" $targetPath -Force -ErrorAction SilentlyContinue

                        # Copy subdirectories (wrappers, helpers, etc.)
                        Get-ChildItem "src\rmnpy" -Directory | ForEach-Object {
                          $subTargetPath = Join-Path $targetPath $_.Name
                          if (!(Test-Path $subTargetPath)) {
                            New-Item -ItemType Directory -Path $subTargetPath -Force | Out-Null
                          }
                          Copy-Item "$($_.FullName)\*" $subTargetPath -Recurse -Force -ErrorAction SilentlyContinue
                        }

                        # Copy all DLLs to the main rmnpy directory for MSYS2
                        Copy-Item "src\rmnpy\*.dll" $targetPath -Force -ErrorAction SilentlyContinue

                        Write-Host "Copied rmnpy structure to MSYS2 site-packages"

                        # Test with MSYS2 Python using absolute module path
                        "import sys" | Out-File -FilePath "test_msys2.py" -Encoding utf8
                        "import os" | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        "sys.path.insert(0, r'$msys2SitePackages')" | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        'print(f"Python executable: {sys.executable}")' | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        'print(f"Python path includes: {sys.path[:3]}")' | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        'print(f"MSYS2 site-packages: " + r"$msys2SitePackages")' | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        'print(f"rmnpy directory exists: {os.path.exists(r"$msys2SitePackages\\rmnpy")}")' | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        'import rmnpy' | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        'print("SUCCESS: rmnpy imported with MSYS2 Python!")' | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        'from rmnpy.wrappers.sitypes import Dimensionality' | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        'dim = Dimensionality("L")' | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append
                        'print(f"SUCCESS: Created dimensionality {dim}")' | Out-File -FilePath "test_msys2.py" -Encoding utf8 -Append

                        $msys2Process = Start-Process -FilePath $msys2Python -ArgumentList "test_msys2.py" -NoNewWindow -PassThru -Wait -RedirectStandardOutput "msys2_output.txt" -RedirectStandardError "msys2_error.txt"

                        Write-Host "MSYS2 Python test exit code: $($msys2Process.ExitCode)"

                        if (Test-Path "msys2_output.txt") {
                            $msys2Output = Get-Content "msys2_output.txt" -Raw -ErrorAction SilentlyContinue
                            if ($msys2Output -and $msys2Output.Trim()) {
                                Write-Host "=== MSYS2 Output ==="
                                Write-Host $msys2Output
                            }
                        }

                        if (Test-Path "msys2_error.txt") {
                            $msys2ErrorContent = Get-Content "msys2_error.txt" -Raw -ErrorAction SilentlyContinue
                            if ($msys2ErrorContent -and $msys2ErrorContent.Trim()) {
                                Write-Host "=== MSYS2 Error ==="
                                Write-Host $msys2ErrorContent
                            }
                        }

                        if ($msys2Process.ExitCode -eq 0) {
                            Write-Host "[MSYS2 SUCCESS] MinGW-compiled extensions work with MSYS2 Python!" -ForegroundColor Green

                            # If MSYS2 works, we can run a subset of tests
                            Write-Host "Running basic tests with MSYS2 Python..." -ForegroundColor Green
                            $env:PYTHONPATH = $msys2SitePackages
                            & $msys2Python -c "import rmnpy; from rmnpy.wrappers.sitypes import Dimensionality, Unit, Scalar; print('All imports successful')"
                            if ($LASTEXITCODE -eq 0) {
                                Write-Host "✓ MSYS2 Python can successfully import all rmnpy modules" -ForegroundColor Green
                                $global:msys2Success = $true
                                $global:importFailed = $false
                            } else {
                                Write-Host "✗ MSYS2 Python import verification failed (exit code: $LASTEXITCODE)" -ForegroundColor Yellow
                            }
                        } else {
                            Write-Host "[MSYS2 FAILED] MSYS2 Python also failed (exit code: $($msys2Process.ExitCode))" -ForegroundColor Red
                        }
                    } else {
                        Write-Host "Could not find MSYS2 site-packages directory" -ForegroundColor Red
                    }
                } else {
                    Write-Host "MSYS2 Python not found at $msys2Python" -ForegroundColor Red
                }

                # Final assessment if all approaches failed
                if ($global:importFailed -and -not $global:msys2Success) {
                    Write-Host "=== FINAL ASSESSMENT ===" -ForegroundColor Magenta
                    Write-Host "MinGW-compiled extensions are incompatible with GitHub Actions Windows Python" -ForegroundColor Yellow
                    Write-Host "This is a known issue with MinGW ABI vs Windows Python ABI" -ForegroundColor Yellow
                    Write-Host "Extensions built successfully - issue is runtime ABI mismatch" -ForegroundColor Yellow
                    Write-Host "Skipping Windows tests due to fundamental ABI incompatibility" -ForegroundColor Yellow

                    # Don't exit with error - the build succeeded, just runtime incompatible
                    $global:windowsTestSkipped = $true
                }
            }

        } elseif ($process.ExitCode -ne 0) {
            Write-Host "Import test failed with exit code: $($process.ExitCode)" -ForegroundColor Red
            $global:importFailed = $true
        } else {
            Write-Host "[SUCCESS] rmnpy import successful!" -ForegroundColor Green
            $global:importFailed = $false
        }

        # Test Dimensionality import if basic import worked and not skipped
        if (-not $global:windowsTestSkipped -and -not $global:importFailed) {
            Write-Host "Testing Dimensionality import..."

            # Write Dimensionality test to script file to avoid PowerShell string truncation
            'import sys' | Out-File -FilePath "test_dimensionality.py" -Encoding utf8
            'sys.path.insert(0, "src")' | Out-File -FilePath "test_dimensionality.py" -Encoding utf8 -Append
            'from rmnpy.wrappers.sitypes import Dimensionality' | Out-File -FilePath "test_dimensionality.py" -Encoding utf8 -Append
            'd = Dimensionality("L")' | Out-File -FilePath "test_dimensionality.py" -Encoding utf8 -Append
            'print(f"SUCCESS: Created {d}")' | Out-File -FilePath "test_dimensionality.py" -Encoding utf8 -Append

            $dimProcess = Start-Process -FilePath "$env:pythonLocation\python.exe" -ArgumentList "test_dimensionality.py" -NoNewWindow -PassThru -Wait -RedirectStandardOutput "dim_output.txt" -RedirectStandardError "dim_error.txt"

            if ($dimProcess.ExitCode -eq 0) {
                $dimOutput = Get-Content "dim_output.txt" -Raw -ErrorAction SilentlyContinue
                Write-Host "[SUCCESS] Dimensionality test: $dimOutput" -ForegroundColor Green
            } else {
                Write-Host "[WARNING] Dimensionality test failed, but basic import worked" -ForegroundColor Yellow
                if (Test-Path "dim_error.txt") {
                    $dimError = Get-Content "dim_error.txt" -Raw -ErrorAction SilentlyContinue
                    if ($dimError -and $dimError.Trim()) {
                        Write-Host "Dimensionality error: $dimError"
                    }
                }
            }
        } else {
            Write-Host "Skipping Dimensionality test due to import failure or MinGW ABI incompatibility" -ForegroundColor Yellow
        }
    - name: Run tests (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pytest tests/ -v --cov=rmnpy --cov-report=xml --cov-report=term

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Run pytest under MSYS2 Python to use the same MinGW ABI
        & "${{ runner.temp }}\msys64\mingw64\bin\python.exe" -m pytest tests/ -v --cov=rmnpy --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint and style checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only the linting tools, not the full package
        python -m pip install black>=21.0.0 isort>=5.9.0 flake8>=3.9.0

    - name: Run black
      run: |
        python -m black --check --diff src/ tests/

    - name: Run isort
      run: |
        python -m isort --check-only --diff src/ tests/

    - name: Run flake8
      run: |
        python -m flake8 src/ tests/

  docs:
    name: Documentation build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev pandoc

    - name: Download OCTypes from GitHub releases
      run: |
        mkdir -p lib include/OCTypes
        LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/${LIB_FILE} -o octypes-lib.zip
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/libOCTypes-headers.zip -o octypes-headers.zip
        unzip -o -j -q octypes-lib.zip -d lib/
        unzip -o -j -q octypes-headers.zip -d include/OCTypes/
        rm octypes-lib.zip octypes-headers.zip

    - name: Download SITypes from GitHub releases
      run: |
        mkdir -p include/SITypes
        LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/${LIB_FILE} -o sitypes-lib.zip
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/libSITypes-headers.zip -o sitypes-headers.zip
        unzip -o -j -q sitypes-lib.zip -d lib/
        unzip -o -j -q sitypes-headers.zip -d include/SITypes/
        rm sitypes-lib.zip sitypes-headers.zip

    - name: Download RMNLib from GitHub releases
      run: |
        mkdir -p include/RMNLib
        LIB_FILE="libRMN-ubuntu-latest.x64.zip"
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/${LIB_FILE} -o rmnlib-lib.zip
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/libRMN-headers.zip -o rmnlib-headers.zip
        unzip -o -j -q rmnlib-lib.zip -d lib/
        unzip -o -j -q rmnlib-headers.zip -d include/RMNLib/
        rm rmnlib-lib.zip rmnlib-headers.zip

    - name: Verify downloaded libraries
      run: |
        ls -la lib/
        ls -la include/
        echo "✓ Libraries downloaded and ready for documentation build"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install documentation dependencies and build tools
        python -m pip install sphinx>=3.1.0 sphinx-rtd-theme>=0.5.2 breathe>=4.13.0 myst-parser>=0.15.0 sphinx-copybutton>=0.3.0 nbsphinx>=0.8.0
        python -m pip install Cython "numpy>=1.21,<2"

    - name: Build Cython extensions for docs
      run: |
        # Build extensions in-place so they can be imported by Sphinx
        python setup.py build_ext --inplace

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
