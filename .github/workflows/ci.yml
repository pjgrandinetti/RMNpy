name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux: Python 3.11 & 3.12
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          # macOS: Python 3.11 & 3.12
          - os: macos-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.12"
          # Windows (MinGW): Python 3.12 only
          - os: windows-latest
            python-version: "3.12"

    steps:
      - name: Checkout RMNpy
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        if: runner.os != 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true || true
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev libomp5 unzip

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake flex bison openblas lapack curl libomp unzip

      - name: Setup MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-python-numpy
            mingw-w64-x86_64-python-pytest
            mingw-w64-x86_64-python-pytest-cov
            mingw-w64-x86_64-cython
            mingw-w64-x86_64-curl
            mingw-w64-x86_64-openblas
            mingw-w64-x86_64-lapack
            mingw-w64-x86_64-openmp
            mingw-w64-x86_64-make
            unzip

      - name: Verify MSYS2 Python (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          python --version
          python -c "import sys, numpy; print(sys.executable); print('NumPy:', numpy.__version__)"

      - name: Download OCTypes (latest)
        shell: bash
        run: |
          set -e
          mkdir -p lib include/OCTypes
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            ARCH=$(uname -m)
            [[ "$ARCH" == "aarch64" || "$ARCH" == "arm64" ]] && LIB_FILE="libOCTypes-ubuntu-latest.arm64.zip" || LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            LIB_FILE="libOCTypes-macos-latest.zip"
          else
            LIB_FILE="libOCTypes-windows-latest.zip"
          fi
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/OCTypes/releases/latest/download/${LIB_FILE} -o octypes-lib.zip
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/OCTypes/releases/latest/download/libOCTypes-headers.zip -o octypes-headers.zip
          # Extract only shared libraries to maintain TypeID consistency across Cython modules
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            unzip -o -j -q octypes-lib.zip "*.dll" "*.dll.a" -d lib/
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            unzip -o -j -q octypes-lib.zip "*.dylib" -d lib/
          else
            unzip -o -j -q octypes-lib.zip "*.so" -d lib/
          fi
          unzip -o -j -q octypes-headers.zip -d include/OCTypes/
          rm -f octypes-lib.zip octypes-headers.zip

      - name: Download SITypes (latest)
        shell: bash
        run: |
          set -e
          mkdir -p include/SITypes
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            ARCH=$(uname -m)
            [[ "$ARCH" == "aarch64" || "$ARCH" == "arm64" ]] && LIB_FILE="libSITypes-ubuntu-latest.arm64.zip" || LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            LIB_FILE="libSITypes-macos-latest.zip"
          else
            LIB_FILE="libSITypes-windows-latest.zip"
          fi
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/SITypes/releases/latest/download/${LIB_FILE} -o sitypes-lib.zip
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/SITypes/releases/latest/download/libSITypes-headers.zip -o sitypes-headers.zip
          # Extract only shared libraries to maintain TypeID consistency across Cython modules
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            unzip -o -j -q sitypes-lib.zip "*.dll" "*.dll.a" -d lib/
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            unzip -o -j -q sitypes-lib.zip "*.dylib" -d lib/
          else
            unzip -o -j -q sitypes-lib.zip "*.so" -d lib/
          fi
          unzip -o -j -q sitypes-headers.zip -d include/SITypes/
          rm -f sitypes-lib.zip sitypes-headers.zip

      - name: Download RMNLib (latest)
        shell: bash
        run: |
          set -e
          mkdir -p include/RMNLib
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            ARCH=$(uname -m)
            [[ "$ARCH" == "aarch64" || "$ARCH" == "arm64" ]] && LIB_FILE="libRMN-ubuntu-latest.arm64.zip" || LIB_FILE="libRMN-ubuntu-latest.x64.zip"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            LIB_FILE="libRMN-macos-latest.zip"
          else
            LIB_FILE="libRMN-windows-latest.zip"
          fi
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/RMNLib/releases/latest/download/${LIB_FILE} -o rmnlib-lib.zip
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/RMNLib/releases/latest/download/libRMN-headers.zip -o rmnlib-headers.zip
          # Extract only shared libraries to maintain TypeID consistency across Cython modules
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            unzip -o -j -q rmnlib-lib.zip "*.dll" "*.dll.a" -d lib/
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            unzip -o -j -q rmnlib-lib.zip "*.dylib" -d lib/
          else
            unzip -o -j -q rmnlib-lib.zip "*.so" -d lib/
          fi
          unzip -o -q rmnlib-headers.zip -d .
          rm -f rmnlib-lib.zip rmnlib-headers.zip

      - name: Verify downloaded libraries
        shell: bash
        run: |
          echo "lib/:" && ls -la lib/ || true
          echo "include/:" && ls -la include/ || true
          # Verify we have shared libraries only (critical for TypeID consistency)
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Checking for Windows DLLs and import libraries..."
            ls -la lib/*.dll lib/*.dll.a 2>/dev/null || echo "Missing Windows shared libraries"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "Checking for macOS dylibs..."
            ls -la lib/*.dylib 2>/dev/null || echo "Missing macOS shared libraries"
          else
            echo "Checking for Linux shared objects..."
            ls -la lib/*.so 2>/dev/null || echo "Missing Linux shared libraries"
          fi
          # Verify no static libraries are present (would cause TypeID conflicts)
          # Note: .dll.a files on Windows are import libraries (not static), so exclude them
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # On Windows, check for actual static libraries (.a files that are NOT .dll.a)
            if ls lib/*.a 2>/dev/null | grep -v '\.dll\.a$'; then
              echo "ERROR: Static libraries found - these would cause TypeID conflicts!"
              echo "Only shared libraries should be present to maintain TypeID consistency."
              exit 1
            else
              echo "Good: No static libraries found - TypeID consistency maintained"
              echo "Import libraries (.dll.a) are present as expected for Windows linking"
            fi
          else
            # On Linux/macOS, any .a files are static libraries and should be rejected
            if ls lib/*.a 2>/dev/null; then
              echo "ERROR: Static libraries found - these would cause TypeID conflicts!"
              echo "Only shared libraries should be present to maintain TypeID consistency."
              exit 1
            else
              echo "Good: No static libraries found - TypeID consistency maintained"
            fi
          fi

      - name: Verify Windows DLLs
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          echo "Available libraries:"
          ls -la lib/ || true
          echo "DLL files:"
          ls -la lib/*.dll || true
          echo "Import libraries:"
          ls -la lib/*.dll.a || true
          # Ensure DLLs are available - they should be used directly, not bundled into a bridge
          # This maintains TypeID consistency across Cython modules
          if [ -f lib/libOCTypes.dll ] && [ -f lib/libSITypes.dll ] && [ -f lib/libRMN.dll ]; then
            echo "All required DLLs found - TypeID consistency will be maintained"
          else
            echo "Missing required DLLs - this may cause TypeID conflicts"
            exit 1
          fi

      - name: Install Python deps (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.LD_LIBRARY_PATH }}
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.DYLD_LIBRARY_PATH }}
        run: |
          python -m pip install --upgrade pip setuptools wheel "numpy>=1.21,<2" cython
          python -m pip install -e .[test]

      - name: Install Python deps (Windows via MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        env:
          PATH: ${{ github.workspace }}/lib:${{ env.PATH }}
        run: |
          python setup.py build_ext --inplace
          python -m pip install --no-build-isolation -e .

      - name: Generate constants (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.LD_LIBRARY_PATH }}
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.DYLD_LIBRARY_PATH }}
        run: make generate-constants

      - name: Generate constants (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        env:
          PATH: ${{ github.workspace }}/lib:${{ env.PATH }}
        run: python scripts/extract_si_constants.py || true

      - name: Smoke import (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        env:
          PATH: ${{ github.workspace }}/lib:${{ env.PATH }}
        run: python -c "import rmnpy; print('RMNpy:', rmnpy.__version__)"

      - name: Run test suite (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.LD_LIBRARY_PATH }}
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.DYLD_LIBRARY_PATH }}
        run: python -m pytest --maxfail=1 --disable-warnings -q

      - name: Run test suite (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        env:
          PATH: ${{ github.workspace }}/lib:${{ env.PATH }}
        run: python -m pytest --maxfail=1 --disable-warnings -q
