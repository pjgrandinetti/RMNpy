name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux: Python 3.11 & 3.12
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          # macOS: Python 3.11 & 3.12
          - os: macos-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.12"
          # Windows (MinGW): Python 3.12 only
          - os: windows-latest
            python-version: "3.12"

    steps:
      - name: Checkout RMNpy
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        if: runner.os != 'Windows'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true || true
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev libomp5 unzip

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake flex bison openblas lapack curl libomp unzip

      - name: Setup MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-python
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-python-numpy
            mingw-w64-x86_64-python-pytest
            mingw-w64-x86_64-python-pytest-cov
            mingw-w64-x86_64-cython
            mingw-w64-x86_64-curl
            mingw-w64-x86_64-openblas
            mingw-w64-x86_64-lapack
            mingw-w64-x86_64-openmp
            mingw-w64-x86_64-make
            unzip

      - name: Verify MSYS2 Python (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          python --version
          python -c "import sys, numpy; print(sys.executable); print('NumPy:', numpy.__version__)"

      - name: Download OCTypes (latest)
        shell: bash
        run: |
          set -e
          mkdir -p lib include/OCTypes
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            ARCH=$(uname -m)
            [[ "$ARCH" == "aarch64" || "$ARCH" == "arm64" ]] && LIB_FILE="libOCTypes-ubuntu-latest.arm64.zip" || LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            LIB_FILE="libOCTypes-macos-latest.zip"
          else
            LIB_FILE="libOCTypes-windows-latest.zip"
          fi
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/OCTypes/releases/latest/download/${LIB_FILE} -o octypes-lib.zip
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/OCTypes/releases/latest/download/libOCTypes-headers.zip -o octypes-headers.zip
          unzip -o -j -q octypes-lib.zip -d lib/
          unzip -o -j -q octypes-headers.zip -d include/OCTypes/
          rm -f octypes-lib.zip octypes-headers.zip

      - name: Download SITypes (latest)
        shell: bash
        run: |
          set -e
          mkdir -p include/SITypes
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            ARCH=$(uname -m)
            [[ "$ARCH" == "aarch64" || "$ARCH" == "arm64" ]] && LIB_FILE="libSITypes-ubuntu-latest.arm64.zip" || LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            LIB_FILE="libSITypes-macos-latest.zip"
          else
            LIB_FILE="libSITypes-windows-latest.zip"
          fi
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/SITypes/releases/latest/download/${LIB_FILE} -o sitypes-lib.zip
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/SITypes/releases/latest/download/libSITypes-headers.zip -o sitypes-headers.zip
          unzip -o -j -q sitypes-lib.zip -d lib/
          unzip -o -j -q sitypes-headers.zip -d include/SITypes/
          rm -f sitypes-lib.zip sitypes-headers.zip

      - name: Download RMNLib (latest)
        shell: bash
        run: |
          set -e
          mkdir -p include/RMNLib
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            ARCH=$(uname -m)
            [[ "$ARCH" == "aarch64" || "$ARCH" == "arm64" ]] && LIB_FILE="libRMN-ubuntu-latest.arm64.zip" || LIB_FILE="libRMN-ubuntu-latest.x64.zip"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            LIB_FILE="libRMN-macos-latest.zip"
          else
            LIB_FILE="libRMN-windows-latest.zip"
          fi
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/RMNLib/releases/latest/download/${LIB_FILE} -o rmnlib-lib.zip
          curl -fL --retry 5 --retry-delay 5 https://github.com/pjgrandinetti/RMNLib/releases/latest/download/libRMN-headers.zip -o rmnlib-headers.zip
          unzip -o -j -q rmnlib-lib.zip -d lib/
          unzip -o -q rmnlib-headers.zip -d .
          rm -f rmnlib-lib.zip rmnlib-headers.zip

      - name: Verify downloaded libraries
        shell: bash
        run: |
          echo "lib/:" && ls -la lib/ || true
          echo "include/:" && ls -la include/ || true

      - name: Create Windows Bridge DLL
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          echo "Static libraries in lib/:"
          ls -la lib/*.a || true
          if [ -f lib/libOCTypes.a ] && [ -f lib/libSITypes.a ] && [ -f lib/libRMN.a ]; then
            x86_64-w64-mingw32-gcc -shared -o lib/rmnstack_bridge.dll \
              -Wl,--out-implib,lib/rmnstack_bridge.dll.a \
              -Wl,--whole-archive lib/libRMN.a lib/libSITypes.a lib/libOCTypes.a -Wl,--no-whole-archive \
              -Wl,--export-all-symbols \
              -lopenblas -llapack -lcurl -lgcc_s -lwinpthread -lquadmath -lgomp -lm
            test -f lib/rmnstack_bridge.dll || (echo "Bridge DLL failed"; exit 1)
          else
            echo "Missing static libs; skipping bridge DLL"; exit 1
          fi

      - name: Install Python deps (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.LD_LIBRARY_PATH }}
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.DYLD_LIBRARY_PATH }}
        run: |
          python -m pip install --upgrade pip setuptools wheel "numpy>=1.21,<2" cython
          python -m pip install -e .[test]

      - name: Install Python deps (Windows via MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          python setup.py build_ext --inplace
          python -m pip install --no-build-isolation -e .

      - name: Generate constants (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.LD_LIBRARY_PATH }}
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.DYLD_LIBRARY_PATH }}
        run: make generate-constants

      - name: Generate constants (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: python scripts/extract_si_constants.py || true

      - name: Smoke import (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: python -c "import rmnpy; print('RMNpy:', rmnpy.__version__)"

      - name: Run test suite (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.LD_LIBRARY_PATH }}
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/lib:${{ env.DYLD_LIBRARY_PATH }}
        run: python -m pytest --maxfail=1 --disable-warnings -q

      - name: Run test suite (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: python -m pytest --maxfail=1 --disable-warnings -q
