name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          # Windows MinGW builds: MSYS2 only provides Python 3.12 for MinGW
          # Following SpinOps approach - exclude older Python versions on Windows
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
    - name: Checkout RMNpy
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake flex bison openblas lapack curl

    - name: Setup MSYS2 and MinGW toolchain (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: MINGW64
        install: |
          make
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-python
          flex
          bison

    - name: Add MinGW64 to PATH (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $mingw = "${{ runner.temp }}\msys64\mingw64\bin"
        "${mingw}" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

    - name: Alias Python import library (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $pythonVersion = "${{ matrix.python-version }}"
        $versionNoDot = $pythonVersion.Replace(".", "")
        $lib = Join-Path $Env:RUNNER_TEMP "msys64\mingw64\lib\libpython$pythonVersion.dll.a"
        $dest = Join-Path $Env:RUNNER_TEMP "msys64\mingw64\lib\libpython$versionNoDot.dll.a"
        if (Test-Path $lib) { Copy-Item $lib $dest -Force }

    - name: Download OCTypes from GitHub releases
      run: |
        mkdir -p lib include/OCTypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libOCTypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libOCTypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/${LIB_FILE} -o octypes-lib.zip
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/libOCTypes-headers.zip -o octypes-headers.zip
        unzip -o -j -q octypes-lib.zip -d lib/
        unzip -o -j -q octypes-headers.zip -d include/OCTypes/
        rm octypes-lib.zip octypes-headers.zip
      shell: bash

    - name: Download SITypes from GitHub releases
      run: |
        mkdir -p include/SITypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libSITypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libSITypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/${LIB_FILE} -o sitypes-lib.zip
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/libSITypes-headers.zip -o sitypes-headers.zip
        unzip -o -j -q sitypes-lib.zip -d lib/
        unzip -o -j -q sitypes-headers.zip -d include/SITypes/
        rm sitypes-lib.zip sitypes-headers.zip
      shell: bash

    - name: Download RMNLib from GitHub releases
      run: |
        mkdir -p include/RMNLib
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libRMN-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libRMN-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libRMN-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/${LIB_FILE} -o rmnlib-lib.zip
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/libRMN-headers.zip -o rmnlib-headers.zip
        unzip -o -j -q rmnlib-lib.zip -d lib/
        unzip -o -j -q rmnlib-headers.zip -d include/RMNLib/
        rm rmnlib-lib.zip rmnlib-headers.zip
      shell: bash

    - name: Verify downloaded libraries
      run: |
        ls -la lib/
        ls -la include/
        echo "âœ“ Libraries downloaded and ready for Python build"
      shell: bash

    - name: Install build tools
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip setuptools wheel Cython "numpy>=1.21,<2"

    - name: Install build tools (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
      run: |
        # Verify MinGW environment
        Write-Host "MinGW PATH: ${{ runner.temp }}\msys64\mingw64\bin"
        $env:PATH = "${{ runner.temp }}\msys64\mingw64\bin;$env:PATH"

        # Verify compiler availability
        & x86_64-w64-mingw32-gcc --version
        Write-Host "CC environment: $env:CC"
        Write-Host "CXX environment: $env:CXX"

        # Use GitHub Actions Python explicitly (not MSYS2 Python)
        & "$env:pythonLocation\python.exe" -m pip install --upgrade pip setuptools wheel Cython "numpy>=1.21,<2"

    - name: Build Cython extension in-place (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
      run: |
        # Verify environment
        Write-Host "Build environment:"
        Write-Host "  CC: $env:CC"
        Write-Host "  CXX: $env:CXX"
        Write-Host "  PATH includes MinGW: $($env:PATH -like '*mingw64*')"

        # Use GitHub Actions Python explicitly for build with MinGW compiler
        & "$env:pythonLocation\python.exe" setup.py build_ext --inplace

    - name: Copy runtime DLLs (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $mingw = "${{ runner.temp }}\msys64\mingw64\bin"
        # Copy runtime DLLs to main package directory (SpinOps approach)
        $targetDir = "src/rmnpy"
        if (Test-Path $targetDir) {
          Write-Host "Copying DLLs to main package directory: $targetDir"

          # Copy MinGW runtime DLLs
          Copy-Item "$mingw\libgcc_s_seh-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libwinpthread-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libstdc++-6.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libgomp-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libquadmath-0.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libgfortran-5.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy C library DLLs to package directory
          Write-Host "Copying C library DLLs..."
          Copy-Item "lib\*.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Also copy to all wrapper subdirectories for better DLL resolution
          Get-ChildItem "$targetDir\wrappers" -Directory | ForEach-Object {
            $subDir = $_.FullName
            Write-Host "Copying DLLs to $subDir"
            Copy-Item "$mingw\libgcc_s_seh-1.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libwinpthread-1.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libstdc++-6.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "lib\*.dll" $subDir\ -Force -ErrorAction SilentlyContinue
          }

          # List what was copied
          Write-Host "DLLs copied to main directory:"
          Get-ChildItem $targetDir\*.dll | ForEach-Object { Write-Host "  $($_.Name)" }

          # Check the compiled extensions exist
          Write-Host "Compiled extensions:"
          Get-ChildItem "$targetDir\**\*.pyd" -Recurse | ForEach-Object {
            Write-Host "  $($_.Name) - $($_.Length) bytes"
          }
        } else {
          Write-Host "Main package directory not found: $targetDir"
        }

    - name: Install Python dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pip install -e .[test]

    - name: Install Python dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
      run: |
        # Use GitHub Actions Python explicitly for pip install with MinGW compiler
        & "$env:pythonLocation\python.exe" -m pip install -e .[test]

    - name: Generate constants (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        make generate-constants

    - name: Generate constants (Windows)
      if: runner.os == 'Windows'
      # Use the MSYS2 bash shell so that 'make' (installed by MSYS2) is on PATH
      shell: msys2 {0}
      run: |
        make generate-constants

    - name: Diagnose import issues (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
      run: |
        # Add main package directory to PATH for DLL resolution
        $currentDir = Get-Location
        $packageDir = Join-Path $currentDir "src\rmnpy"
        $env:PATH = "$env:pythonLocation;${{ runner.temp }}\msys64\mingw64\bin;$packageDir;$env:PATH"

        Write-Host "=== Diagnostic Information ==="
        Write-Host "Package directory: $packageDir"
        Write-Host "DLLs in package directory:"
        Get-ChildItem "$packageDir\*.dll" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }

        Write-Host "DLLs in lib directory:"
        Get-ChildItem "lib\*.dll" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }

        Write-Host "Python extensions (.pyd files):"
        Get-ChildItem "$packageDir\**\*.pyd" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  $($_.FullName.Replace($currentDir, '.'))"
        }

        Write-Host "=== Testing Python Import with Enhanced DLL Resolution ==="
        Write-Host "Testing basic Python import..."
        & "$env:pythonLocation\python.exe" -c "import sys; print('Python works:', sys.version)"

        Write-Host "Testing rmnpy import with enhanced DLL resolution..."

        # Step 1: Add DLL directories using os.add_dll_directory
        & "$env:pythonLocation\python.exe" -c "import os; from pathlib import Path; [os.add_dll_directory(str(p.absolute())) for p in [Path('src/rmnpy'), Path('lib')] if hasattr(os, 'add_dll_directory') and p.exists()]; print('DLL directories added')"

        # Step 2: Test rmnpy import
        & "$env:pythonLocation\python.exe" -c "import os; from pathlib import Path; [os.add_dll_directory(str(p.absolute())) for p in [Path('src/rmnpy'), Path('lib')] if hasattr(os, 'add_dll_directory') and p.exists()]; import rmnpy; print('SUCCESS: rmnpy imported')"

        # Step 3: Test Dimensionality import
        & "$env:pythonLocation\python.exe" -c "import os; from pathlib import Path; [os.add_dll_directory(str(p.absolute())) for p in [Path('src/rmnpy'), Path('lib')] if hasattr(os, 'add_dll_directory') and p.exists()]; from rmnpy.wrappers.sitypes import Dimensionality; print('SUCCESS: Dimensionality imported')"

    - name: Run tests (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pytest tests/ -v --cov=rmnpy --cov-report=xml --cov-report=term

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        LIBRARY_PATH: ${{ runner.temp }}/msys64/mingw64/lib
        LDFLAGS: "-L${{ runner.temp }}/msys64/mingw64/lib"
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
      run: |
        # Add main package directory to PATH for DLL resolution (SpinOps approach)
        $currentDir = Get-Location
        $packageDir = Join-Path $currentDir "src\rmnpy"
        $libDir = Join-Path $currentDir "lib"
        $env:PATH = "$env:pythonLocation;${{ runner.temp }}\msys64\mingw64\bin;$packageDir;$libDir;$env:PATH"
        Write-Host "Added to PATH: $packageDir and $libDir"

        # Use GitHub Actions Python explicitly for pytest
        & "$env:pythonLocation\python.exe" -m pytest tests/ -v --cov=rmnpy --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint and style checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only the linting tools, not the full package
        python -m pip install black>=21.0.0 isort>=5.9.0 flake8>=3.9.0

    - name: Run black
      run: |
        python -m black --check --diff src/ tests/

    - name: Run isort
      run: |
        python -m isort --check-only --diff src/ tests/

    - name: Run flake8
      run: |
        python -m flake8 src/ tests/

  docs:
    name: Documentation build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev pandoc

    - name: Download OCTypes from GitHub releases
      run: |
        mkdir -p lib include/OCTypes
        LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/${LIB_FILE} -o octypes-lib.zip
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/libOCTypes-headers.zip -o octypes-headers.zip
        unzip -o -j -q octypes-lib.zip -d lib/
        unzip -o -j -q octypes-headers.zip -d include/OCTypes/
        rm octypes-lib.zip octypes-headers.zip

    - name: Download SITypes from GitHub releases
      run: |
        mkdir -p include/SITypes
        LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/${LIB_FILE} -o sitypes-lib.zip
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/libSITypes-headers.zip -o sitypes-headers.zip
        unzip -o -j -q sitypes-lib.zip -d lib/
        unzip -o -j -q sitypes-headers.zip -d include/SITypes/
        rm sitypes-lib.zip sitypes-headers.zip

    - name: Download RMNLib from GitHub releases
      run: |
        mkdir -p include/RMNLib
        LIB_FILE="libRMN-ubuntu-latest.x64.zip"
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/${LIB_FILE} -o rmnlib-lib.zip
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/libRMN-headers.zip -o rmnlib-headers.zip
        unzip -o -j -q rmnlib-lib.zip -d lib/
        unzip -o -j -q rmnlib-headers.zip -d include/RMNLib/
        rm rmnlib-lib.zip rmnlib-headers.zip

    - name: Verify downloaded libraries
      run: |
        ls -la lib/
        ls -la include/
        echo "âœ“ Libraries downloaded and ready for documentation build"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install documentation dependencies and build tools
        python -m pip install sphinx>=3.1.0 sphinx-rtd-theme>=0.5.2 breathe>=4.13.0 myst-parser>=0.15.0 sphinx-copybutton>=0.3.0 nbsphinx>=0.8.0
        python -m pip install Cython "numpy>=1.21,<2"

    - name: Build Cython extensions for docs
      run: |
        # Build extensions in-place so they can be imported by Sphinx
        python setup.py build_ext --inplace

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
