name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          # Windows MinGW builds: MSYS2 only provides Python 3.12 for MinGW
          # Following SpinOps approach - exclude older Python versions on Windows
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
    - name: Checkout RMNpy
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      if: runner.os != 'Windows'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        # Wait for automatic system updates to finish
        sudo systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake flex bison openblas lapack curl libomp

    - name: Setup MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-python
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-python-numpy
          mingw-w64-x86_64-python-pytest
          mingw-w64-x86_64-python-pytest-cov
          mingw-w64-x86_64-cython
          mingw-w64-x86_64-curl
          mingw-w64-x86_64-openblas
          mingw-w64-x86_64-lapack
          mingw-w64-x86_64-make

    - name: Verify MSYS2 Python installation (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "=== Verifying MSYS2 Python installation ==="
        python --version
        python -c "import sys; print('Python executable:', sys.executable)"
        python -c "import numpy; print('NumPy version:', numpy.__version__)"
        python -c "import pytest; print('Pytest installed successfully')"
        echo "✓ MSYS2 Python environment ready"

    - name: Download OCTypes from GitHub releases
      run: |
        mkdir -p lib include/OCTypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libOCTypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libOCTypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/${LIB_FILE} -o octypes-lib.zip
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/libOCTypes-headers.zip -o octypes-headers.zip
        unzip -o -j -q octypes-lib.zip -d lib/
        unzip -o -j -q octypes-headers.zip -d include/OCTypes/
        rm octypes-lib.zip octypes-headers.zip
      shell: bash

    - name: Download SITypes from GitHub releases
      run: |
        mkdir -p include/SITypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libSITypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libSITypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/${LIB_FILE} -o sitypes-lib.zip
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/libSITypes-headers.zip -o sitypes-headers.zip
        unzip -o -j -q sitypes-lib.zip -d lib/
        unzip -o -j -q sitypes-headers.zip -d include/SITypes/
        rm sitypes-lib.zip sitypes-headers.zip
      shell: bash

    - name: Download RMNLib from GitHub releases
      run: |
        mkdir -p include/RMNLib
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libRMN-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libRMN-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libRMN-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/${LIB_FILE} -o rmnlib-lib.zip
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/libRMN-headers.zip -o rmnlib-headers.zip
        unzip -o -j -q rmnlib-lib.zip -d lib/
        unzip -o -q rmnlib-headers.zip -d .
        rm rmnlib-lib.zip rmnlib-headers.zip
      shell: bash

    - name: Verify downloaded libraries
      run: |
        ls -la lib/
        ls -la include/
        echo "✓ Libraries downloaded and ready for Python build"
      shell: bash

    - name: Install build tools (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip setuptools wheel Cython "numpy>=1.21,<2"

    - name: Install Python dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pip install -e .[test]

    - name: Install Python dependencies (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "=== Installing Python dependencies via MSYS2 ==="
        # All dependencies already installed via pacman in MSYS2 setup
        echo "Python version:"
        python --version

        echo "Testing numpy import..."
        python -c "import numpy; print('Numpy version: ' + numpy.__version__)"
        echo "✓ Numpy import successful"

        echo "Building C extensions..."
        python setup.py build_ext --inplace

        echo "Installing package with --no-build-isolation..."
        python -m pip install --no-build-isolation -e .

    - name: Generate constants (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        make generate-constants

    - name: Generate constants (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "Generating constants..."
        python scripts/extract_si_constants.py || echo "Constants generation completed"

    - name: Test basic imports (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "=== Testing Basic Imports ==="
        echo "Python version:"
        python --version

        echo "Testing numpy import..."
        python -c "import numpy; print('Numpy version: ' + numpy.__version__)"
        echo "✓ Numpy import successful"

        echo "Testing RMNpy import..."
        python -c "import rmnpy; print('RMNpy imported successfully')"
        echo "✓ RMNpy import successful"

        echo "✓ All import tests passed"

    - name: Run test suite (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pytest --maxfail=1 --disable-warnings -q

    - name: Run test suite (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "=== Running test suite with MSYS2 Python ==="
        python -m pytest --maxfail=1 --disable-warnings -q
