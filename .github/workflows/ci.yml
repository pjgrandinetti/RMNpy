name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          # Windows MinGW builds: MSYS2 only provides Python 3.12 for MinGW
          # Following SpinOps approach - exclude older Python versions on Windows
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
    - name: Checkout RMNpy
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake flex bison openblas lapack curl

    - name: Setup MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-curl
          mingw-w64-x86_64-openblas
          mingw-w64-x86_64-lapack
          mingw-w64-x86_64-make

    - name: Verify MSYS2 packages installation (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "=== Verifying MSYS2 package installation ==="

        # Check curl installation
        echo "Checking curl:"
        if pacman -Q mingw-w64-x86_64-curl; then
          echo "✓ curl package installed"
          find /mingw64 -name "*curl*.dll" | head -5
        else
          echo "✗ curl package NOT installed"
        fi

        # Check OpenBLAS installation
        echo -e "\nChecking OpenBLAS:"
        if pacman -Q mingw-w64-x86_64-openblas; then
          echo "✓ OpenBLAS package installed"
          find /mingw64 -name "*blas*.dll" | head -5
        else
          echo "✗ OpenBLAS package NOT installed"
        fi

        # Check LAPACK installation
        echo -e "\nChecking LAPACK:"
        if pacman -Q mingw-w64-x86_64-lapack; then
          echo "✓ LAPACK package installed"
          find /mingw64 -name "*lapack*.dll" | head -5
        else
          echo "✗ LAPACK package NOT installed"
        fi

        # List key DLL files we'll need
        echo -e "\n=== Key DLL files available ==="
        ls -la /mingw64/bin/libcurl*.dll 2>/dev/null || echo "No curl DLLs found"
        ls -la /mingw64/bin/libopenblas*.dll 2>/dev/null || echo "No OpenBLAS DLLs found"
        ls -la /mingw64/bin/liblapack*.dll 2>/dev/null || echo "No LAPACK DLLs found"

        # Check for Fortran libraries (gfortran variants)
        echo -e "\n=== Fortran libraries available ==="
        ls -la /mingw64/bin/libgfortran*.dll 2>/dev/null || echo "No libgfortran DLLs found"
        ls -la /mingw64/lib/libgfortran*.a 2>/dev/null || echo "No libgfortran static libs found"
        ls -la /mingw64/lib/libgcc_s*.a 2>/dev/null || echo "No libgcc_s static libs found"

        # List all Fortran-related libraries
        echo -e "\n=== All Fortran-related files ==="
        find /mingw64 -name "*fortran*" -o -name "*gfortran*" 2>/dev/null | head -10

        # Check specific library directory structure
        echo -e "\n=== MinGW64 library directory structure ==="
        ls -la /mingw64/lib/libgcc* 2>/dev/null || echo "No libgcc files found"
        ls -la /mingw64/lib/libgfortran* 2>/dev/null || echo "No libgfortran files found"
        ls -la /mingw64/lib/libwinpthread* 2>/dev/null || echo "No libwinpthread files found"
        ls -la /mingw64/lib/libquadmath* 2>/dev/null || echo "No libquadmath files found"

    - name: Add MinGW64 to PATH (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $mingw = "${{ runner.temp }}\msys64\mingw64\bin"
        "${mingw}" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

    - name: Alias Python import library (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $pythonVersion = "${{ matrix.python-version }}"
        $versionNoDot = $pythonVersion.Replace(".", "")
        $lib = Join-Path $Env:RUNNER_TEMP "msys64\mingw64\lib\libpython$pythonVersion.dll.a"
        $dest = Join-Path $Env:RUNNER_TEMP "msys64\mingw64\lib\libpython$versionNoDot.dll.a"
        if (Test-Path $lib) { Copy-Item $lib $dest -Force }

    - name: Download OCTypes from GitHub releases
      run: |
        mkdir -p lib include/OCTypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libOCTypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libOCTypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/${LIB_FILE} -o octypes-lib.zip
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/libOCTypes-headers.zip -o octypes-headers.zip
        unzip -o -j -q octypes-lib.zip -d lib/
        unzip -o -j -q octypes-headers.zip -d include/OCTypes/
        rm octypes-lib.zip octypes-headers.zip
      shell: bash

    - name: Download SITypes from GitHub releases
      run: |
        mkdir -p include/SITypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libSITypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libSITypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/${LIB_FILE} -o sitypes-lib.zip
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/libSITypes-headers.zip -o sitypes-headers.zip
        unzip -o -j -q sitypes-lib.zip -d lib/
        unzip -o -j -q sitypes-headers.zip -d include/SITypes/
        rm sitypes-lib.zip sitypes-headers.zip
      shell: bash

    - name: Download RMNLib from GitHub releases
      run: |
        mkdir -p include/RMNLib
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libRMN-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libRMN-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libRMN-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/${LIB_FILE} -o rmnlib-lib.zip
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/libRMN-headers.zip -o rmnlib-headers.zip
        unzip -o -j -q rmnlib-lib.zip -d lib/
        unzip -o -j -q rmnlib-headers.zip -d include/RMNLib/
        rm rmnlib-lib.zip rmnlib-headers.zip
      shell: bash

    - name: Verify downloaded libraries
      run: |
        ls -la lib/
        ls -la include/
        echo "✓ Libraries downloaded and ready for Python build"
      shell: bash

    - name: Debug library downloads (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "=== Library Download Debug ==="
        Write-Host "Contents of lib directory:"
        Get-ChildItem lib -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  $($_.Name) - $($_.Length) bytes - Type: $($_.GetType().Name)"
        }

        Write-Host "Looking for DLL files specifically:"
        Get-ChildItem lib\*.dll -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  DLL: $($_.Name) - $($_.Length) bytes"
        }

        Write-Host "Looking for library files (.a, .lib):"
        Get-ChildItem lib\*.a, lib\*.lib -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  LIB: $($_.Name) - $($_.Length) bytes"
        }

        # Analyze dependencies of compiled extensions
        Write-Host "=== Analyzing Extension Dependencies ==="
        if (Get-Command objdump -ErrorAction SilentlyContinue) {
          Write-Host "Using objdump to analyze dependencies..."
          Get-ChildItem "src\rmnpy\**\*.pyd" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Dependencies for $($_.Name):"
            & objdump -p $_.FullName | Select-String "DLL Name:"
          }
        } else {
          Write-Host "objdump not available for dependency analysis"
        }

    - name: Install build tools
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip setuptools wheel Cython "numpy>=1.21,<2"

    - name: Install build tools (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
      run: |
        # Verify MinGW environment
        Write-Host "MinGW PATH: ${{ runner.temp }}\msys64\mingw64\bin"
        $env:PATH = "${{ runner.temp }}\msys64\mingw64\bin;$env:PATH"

        # Verify compiler availability
        & x86_64-w64-mingw32-gcc --version
        Write-Host "CC environment: $env:CC"
        Write-Host "CXX environment: $env:CXX"

        # Use GitHub Actions Python explicitly (not MSYS2 Python)
        & "$env:pythonLocation\python.exe" -m pip install --upgrade pip setuptools wheel Cython "numpy>=1.21,<2"

    - name: Build Cython extension in-place (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
        LDFLAGS: "-L${{ runner.temp }}/msys64/mingw64/lib"
        LIBS: "-lcurl -lopenblas -llapack"
        MINGW_LIB_DIR: "${{ runner.temp }}/msys64/mingw64/lib"
      run: |
        # Verify environment
        Write-Host "Build environment:"
        Write-Host "  CC: $env:CC"
        Write-Host "  CXX: $env:CXX"
        Write-Host "  PATH includes MinGW: $($env:PATH -like '*mingw64*')"
        Write-Host "  LDFLAGS: $env:LDFLAGS"
        Write-Host "  LIBS: $env:LIBS"
        Write-Host "  MINGW_LIB_DIR: $env:MINGW_LIB_DIR"

        # Use GitHub Actions Python explicitly for build with MinGW compiler
        & "$env:pythonLocation\python.exe" setup.py build_ext --inplace

    - name: Copy runtime DLLs (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $mingw = "${{ runner.temp }}\msys64\mingw64\bin"
        # Copy runtime DLLs to main package directory (SpinOps approach)
        $targetDir = "src/rmnpy"
        if (Test-Path $targetDir) {
          Write-Host "Copying DLLs to main package directory: $targetDir"

          # Copy MinGW runtime DLLs
          Copy-Item "$mingw\libgcc_s_seh-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libwinpthread-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libstdc++-6.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libgomp-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libquadmath-0.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libgfortran-5.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy curl DLLs (required by RMNLib)
          Write-Host "Copying curl dependencies..."
          Copy-Item "$mingw\libcurl-4.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libssl-3-x64.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libcrypto-3-x64.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libzstd.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libbrotlidec.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libbrotlicommon.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libnghttp2-14.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libidn2-0.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libssh2-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libunistring-5.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libintl-8.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libiconv-2.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy OpenBLAS DLLs (required by RMNLib)
          Write-Host "Copying OpenBLAS dependencies..."
          Copy-Item "$mingw\libopenblas.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\liblapack.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy Python runtime DLL (critical for .pyd imports)
          Write-Host "Copying Python runtime DLL..."
          $pythonDll = Get-ChildItem "$env:pythonLocation" -Filter "python*.dll" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($pythonDll) {
            Write-Host "  Found Python DLL: $($pythonDll.Name)"
            Copy-Item $pythonDll.FullName $targetDir\ -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "  No Python DLL found in $env:pythonLocation"
          }

          # Search for libpython3.12.dll specifically (required by objdump analysis)
          Write-Host "Searching for libpython3.12.dll in targeted locations..."
          $searchPaths = @(
            "$env:pythonLocation",
            "${{ runner.temp }}\msys64\mingw64\bin",
            "${{ runner.temp }}\msys64\mingw64\lib",
            "C:\hostedtoolcache\windows\Python",
            "C:\Python*",
            "C:\tools\Python*"
          )

          $libpython = $null
          foreach ($searchPath in $searchPaths) {
            if (Test-Path $searchPath) {
              Write-Host "  Checking: $searchPath"
              $found = Get-ChildItem $searchPath -Filter "libpython3.12.dll" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($found) {
                $libpython = $found
                break
              }
            }
          }

          if ($libpython) {
            Write-Host "  Found libpython3.12.dll: $($libpython.FullName)"
            Copy-Item $libpython.FullName $targetDir\ -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "  libpython3.12.dll not found system-wide"
          }

          # Copy C library DLLs to package directory
          Write-Host "Copying C library DLLs..."
          if (Test-Path "lib") {
            Write-Host "Contents of lib directory:"
            Get-ChildItem "lib" | ForEach-Object { Write-Host "  $($_.Name)" }
            Copy-Item "lib\*.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "lib\*.a" $targetDir\ -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "lib directory does not exist"
          }

          # Also copy to all wrapper subdirectories for better DLL resolution
          Get-ChildItem "$targetDir\wrappers" -Directory -ErrorAction SilentlyContinue | ForEach-Object {
            $subDir = $_.FullName
            Write-Host "Copying DLLs to $subDir"
            Copy-Item "$mingw\libgcc_s_seh-1.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libwinpthread-1.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libstdc++-6.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libcurl-4.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            Copy-Item "$mingw\libopenblas.dll" $subDir\ -Force -ErrorAction SilentlyContinue
            if (Test-Path "lib") {
              Copy-Item "lib\*.dll" $subDir\ -Force -ErrorAction SilentlyContinue
              Copy-Item "lib\*.a" $subDir\ -Force -ErrorAction SilentlyContinue
            }
          }

          # List what was copied
          Write-Host "DLLs copied to main directory:"
          Get-ChildItem $targetDir\*.dll | ForEach-Object { Write-Host "  $($_.Name)" }

          # Check the compiled extensions exist
          Write-Host "Compiled extensions:"
          Get-ChildItem "$targetDir\**\*.pyd" -Recurse | ForEach-Object {
            Write-Host "  $($_.Name) - $($_.Length) bytes"
          }
        } else {
          Write-Host "Main package directory not found: $targetDir"
        }

    - name: Install Python dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pip install -e .[test]

    - name: Install Python dependencies (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
        MINGW_LIB_DIR: "${{ runner.temp }}/msys64/mingw64/lib"
      run: |
        # Use GitHub Actions Python explicitly for pip install with MinGW compiler
        & "$env:pythonLocation\python.exe" -m pip install -e .[test]

    - name: Generate constants (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        make generate-constants

    - name: Generate constants (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Constants are generated during the Python build process as constants.pyx
        # Check for the generated constants file
        Write-Host "Checking for generated constants..."
        if (Test-Path "src/rmnpy/constants.pyx") {
          Write-Host "✓ Constants file exists: src/rmnpy/constants.pyx"
          $constantsContent = Get-Content "src/rmnpy/constants.pyx" -First 10
          Write-Host "Contents preview:"
          $constantsContent | ForEach-Object { Write-Host "  $_" }
        } else {
          Write-Host "⚠ Constants file not found - running manual generation"
          # Manually run the constants generation
          & "$env:pythonLocation\python.exe" scripts/extract_si_constants.py
        }
        Write-Host "Constants generation check completed"

    - name: Diagnose import issues (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
      run: |
        # Add main package directory to PATH for DLL resolution
        $currentDir = Get-Location
        $packageDir = Join-Path $currentDir "src\rmnpy"
        $env:PATH = "$env:pythonLocation;${{ runner.temp }}\msys64\mingw64\bin;$packageDir;$env:PATH"

        Write-Host "=== Diagnostic Information ==="
        Write-Host "Package directory: $packageDir"
        Write-Host "DLLs in package directory:"
        Get-ChildItem "$packageDir\*.dll" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }

        Write-Host "DLLs in lib directory:"
        Get-ChildItem "lib\*.dll" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $($_.Name)" }

        Write-Host "Python extensions (.pyd files):"
        Get-ChildItem "$packageDir\**\*.pyd" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  $($_.FullName.Replace($currentDir, '.'))"
        }

        Write-Host "=== Testing Python Import with Enhanced DLL Resolution ==="
        Write-Host "Testing basic Python import..."
        & "$env:pythonLocation\python.exe" -c "import sys; print('Python works:', sys.version)"

        Write-Host "Adding DLL directories with os.add_dll_directory..."
        & "$env:pythonLocation\python.exe" -c "import os; from pathlib import Path; print('Available DLL paths:'); [print(f'  {p}: exists={p.exists()}') for p in [Path('src/rmnpy'), Path('lib'), Path('src/rmnpy/wrappers/sitypes')]]; print('Adding DLL directories...'); [os.add_dll_directory(str(p.absolute())) for p in [Path('src/rmnpy'), Path('lib')] if hasattr(os, 'add_dll_directory') and p.exists()]; print('DLL directories added')"

        # Also add MinGW bin directory to DLL search path
        Write-Host "Adding MinGW DLL directory..."
        $mingwBin = "${{ runner.temp }}\msys64\mingw64\bin"
        & "$env:pythonLocation\python.exe" -c "import os; from pathlib import Path; mingw_bin = Path(r'$mingwBin'); print(f'MinGW bin exists: {mingw_bin.exists()}'); os.add_dll_directory(str(mingw_bin.absolute())) if hasattr(os, 'add_dll_directory') and mingw_bin.exists() else None; print('MinGW DLL directory added')"

        Write-Host "Testing direct extension import..."
        & "$env:pythonLocation\python.exe" -c "import os; from pathlib import Path; [os.add_dll_directory(str(p.absolute())) for p in [Path('src/rmnpy'), Path('lib'), Path(r'$mingwBin')] if hasattr(os, 'add_dll_directory') and p.exists()]; import sys; sys.path.insert(0, 'src'); from rmnpy.wrappers.sitypes.dimensionality import *; print('SUCCESS: Direct dimensionality import')"

        Write-Host "Testing rmnpy import..."
        & "$env:pythonLocation\python.exe" -c "import os; from pathlib import Path; [os.add_dll_directory(str(p.absolute())) for p in [Path('src/rmnpy'), Path('lib'), Path(r'$mingwBin')] if hasattr(os, 'add_dll_directory') and p.exists()]; import rmnpy; print('SUCCESS: rmnpy imported')"

        Write-Host "Testing Dimensionality import..."
        & "$env:pythonLocation\python.exe" -c "import os; from pathlib import Path; [os.add_dll_directory(str(p.absolute())) for p in [Path('src/rmnpy'), Path('lib'), Path(r'$mingwBin')] if hasattr(os, 'add_dll_directory') and p.exists()]; from rmnpy.wrappers.sitypes import Dimensionality; print('SUCCESS: Dimensionality imported')"

        Write-Host "=== Comprehensive Dependency Analysis ==="
        # Find all .pyd files and analyze their dependencies
        $pydFiles = Get-ChildItem -Path "src" -Filter "*.pyd" -Recurse
        ForEach ($pydFile in $pydFiles) {
            Write-Host "Analyzing dependencies for: $($pydFile.FullName)"
            # Use MinGW objdump from the toolchain, not from usr/bin
            $objdumpPath = "${{ runner.temp }}\msys64\mingw64\bin\objdump.exe"
            if (Test-Path $objdumpPath) {
                & $objdumpPath -p "$($pydFile.FullName)" | Select-String "DLL Name"
            } else {
                Write-Host "objdump not found at $objdumpPath, skipping dependency analysis"
            }
        }

        # List all files in MinGW bin to see what's available
        Write-Host "=== MinGW Bin Directory Contents ==="
        $mingwBinPath = "${{ runner.temp }}\msys64\mingw64\bin"
        if (Test-Path $mingwBinPath) {
            Write-Host "MinGW bin directory exists at: $mingwBinPath"
            $dllFiles = Get-ChildItem -Path $mingwBinPath -Filter "*.dll" | Select-Object -First 20
            Write-Host "Available DLL files (first 20):"
            ForEach ($dll in $dllFiles) {
                Write-Host "  $($dll.Name)"
            }
        } else {
            Write-Host "MinGW bin directory not found at: $mingwBinPath"
        }

        # Copy critical MinGW runtime DLLs that might be needed
        Write-Host "=== Copying Critical Runtime DLLs ==="
        if (Test-Path $mingwBinPath) {
            $criticalDlls = @("libgcc_s_seh-1.dll", "libwinpthread-1.dll", "libstdc++-6.dll", "libgomp-1.dll", "libgfortran-5.dll", "libquadmath-0.dll")
            ForEach ($dll in $criticalDlls) {
                $dllPath = Join-Path $mingwBinPath $dll
                if (Test-Path $dllPath) {
                    Write-Host "Copying $dll to src/rmnpy/"
                    Copy-Item $dllPath "src/rmnpy/" -Force
                    Write-Host "Copying $dll to lib/"
                    Copy-Item $dllPath "lib/" -Force
                } else {
                    Write-Host "$dll not found in MinGW bin"
                }
            }
        }

        # Copy additional required math libraries that might be missing
        Write-Host "=== Copying Additional Math Libraries ==="
        $mathLibs = @("libgmp-10.dll", "libmpfr-6.dll", "libmpc-3.dll", "libiconv-2.dll")
        ForEach ($lib in $mathLibs) {
            $libPath = Join-Path $mingwBinPath $lib
            if (Test-Path $libPath) {
                Write-Host "Copying $lib to package directory"
                Copy-Item $libPath "src/rmnpy/" -Force
            } else {
                Write-Host "$lib not found in MinGW bin"
            }
        }

        # Enhanced import test with step-by-step debugging
        Write-Host "=== Enhanced Import Test ==="
        Write-Host "Step 1: Testing basic Python functionality"
        & "$env:pythonLocation\python.exe" -c "import sys; print('Python executable:', sys.executable)"

        Write-Host "Step 2: Adding DLL directories"
        & "$env:pythonLocation\python.exe" -c "import os; from pathlib import Path; dirs = [Path('src/rmnpy'), Path('lib'), Path('$mingwBinPath')]; [os.add_dll_directory(str(p.absolute())) for p in dirs if hasattr(os, 'add_dll_directory') and p.exists()]; print('DLL directories added')"

        Write-Host "Step 3: Testing package structure"
        & "$env:pythonLocation\python.exe" -c "import sys; sys.path.insert(0, 'src'); import rmnpy; print('SUCCESS: rmnpy package imported')"

        Write-Host "Step 4: Testing direct module import with enhanced error handling"
        & "$env:pythonLocation\python.exe" -c "import os, sys, traceback; from pathlib import Path; [os.add_dll_directory(str(p.absolute())) for p in [Path('src/rmnpy'), Path('lib'), Path('$mingwBinPath')] if hasattr(os, 'add_dll_directory') and p.exists()]; sys.path.insert(0, 'src'); exec('try: from rmnpy.wrappers.sitypes.dimensionality import Dimensionality; print(\"SUCCESS: Dimensionality imported\")\nexcept Exception as e: import traceback; print(f\"ERROR: {e}\"); traceback.print_exc()')"

        Write-Host "Step 5: Deep dependency analysis for import failure"
        if (Test-Path "src\rmnpy\wrappers\sitypes\dimensionality.pyd") {
            Write-Host "Found dimensionality.pyd, analyzing dependencies..."
            & "$mingwBinPath\objdump.exe" -p "src\rmnpy\wrappers\sitypes\dimensionality.pyd" | Select-String "DLL Name:"

            Write-Host "Checking if all required DLLs are accessible..."
            $missingDlls = @()
            $pydDeps = & "$mingwBinPath\objdump.exe" -p "src\rmnpy\wrappers\sitypes\dimensionality.pyd" | Select-String "DLL Name:" | ForEach-Object { $_.ToString().Split(":")[1].Trim() }
            foreach ($dll in $pydDeps) {
                $found = $false
                foreach ($searchPath in @("src\rmnpy", "lib", "$mingwBinPath")) {
                    if (Test-Path "$searchPath\$dll") {
                        Write-Host "✓ Found $dll in $searchPath"
                        $found = $true
                        break
                    }
                }
                if (-not $found) {
                    Write-Host "✗ Missing: $dll"
                    $missingDlls += $dll
                }
            }

            if ($missingDlls.Count -gt 0) {
                Write-Host "Missing DLLs detected: $($missingDlls -join ', ')"
                Write-Host "Searching for missing DLLs in MinGW installation..."
                foreach ($dll in $missingDlls) {
                    $foundPath = Get-ChildItem -Path "${{ runner.temp }}\msys64" -Name "$dll" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
                    if ($foundPath) {
                        Write-Host "Found $dll at: $foundPath"
                        $fullPath = Join-Path "${{ runner.temp }}\msys64" $foundPath
                        $destPath = Join-Path "lib" $dll
                        Copy-Item $fullPath $destPath -Force
                        Write-Host "Copied $dll to lib directory"
                    } else {
                        Write-Host "Could not locate $dll anywhere in MinGW installation"
                    }
                }

                Write-Host "Step 6: Retry import after copying missing DLLs"
                & "$env:pythonLocation\python.exe" -c "import os, sys, traceback; from pathlib import Path; [os.add_dll_directory(str(p.absolute())) for p in [Path('src/rmnpy'), Path('lib'), Path('$mingwBinPath')] if hasattr(os, 'add_dll_directory') and p.exists()]; sys.path.insert(0, 'src'); exec('try: from rmnpy.wrappers.sitypes.dimensionality import Dimensionality; print(\"SUCCESS: Dimensionality imported after DLL fix\")\nexcept Exception as e: import traceback; print(f\"STILL FAILING: {e}\"); traceback.print_exc()')"
            } else {
                Write-Host "All required DLLs found, import failure may be due to other issues"
            }
        } else {
            Write-Host "dimensionality.pyd not found at expected location"
        }

    - name: Run tests (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pytest tests/ -v --cov=rmnpy --cov-report=xml --cov-report=term

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        LIBRARY_PATH: ${{ runner.temp }}/msys64/mingw64/lib
        LDFLAGS: "-L${{ runner.temp }}/msys64/mingw64/lib"
        PATH: ${{ runner.temp }}/msys64/mingw64/bin;${{ env.PATH }}
      run: |
        # Set up comprehensive DLL resolution for Windows tests
        $currentDir = Get-Location
        $packageDir = Join-Path $currentDir "src\rmnpy"
        $libDir = Join-Path $currentDir "lib"
        $mingwBin = "${{ runner.temp }}\msys64\mingw64\bin"

        # Create a comprehensive PATH that includes all DLL locations
        $env:PATH = "$env:pythonLocation;$mingwBin;$packageDir;$libDir;$env:PATH"
        Write-Host "Enhanced PATH for DLL resolution"

        # Verify all critical components are in place
        Write-Host "=== Final Verification Before Tests ==="
        Write-Host "Package directory exists: $(Test-Path $packageDir)"
        Write-Host "Lib directory exists: $(Test-Path $libDir)"
        Write-Host "MinGW bin exists: $(Test-Path $mingwBin)"

        Write-Host "Python extensions found:"
        Get-ChildItem "$packageDir\**\*.pyd" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  $($_.Name)"
        }

        Write-Host "Runtime DLLs in package directory:"
        Get-ChildItem "$packageDir\*.dll" -ErrorAction SilentlyContinue | Select-Object -First 5 | ForEach-Object {
          Write-Host "  $($_.Name)"
        }

        # Test critical import with DLL path enhancement
        Write-Host "=== Testing Critical Import ==="

        # Create simple Python test
        $testImport = "import os; import sys"
        $testImport += "; [os.add_dll_directory(str(p)) for p in ['src/rmnpy', 'lib', '${{ runner.temp }}/msys64/mingw64/bin'] if hasattr(os, 'add_dll_directory') and os.path.exists(p)]"
        $testImport += "; sys.path.insert(0, 'src')"
        $testImport += "; from rmnpy.wrappers.sitypes.dimensionality import Dimensionality"
        $testImport += "; dim = Dimensionality('m')"
        $testImport += "; print('SUCCESS: Dimensionality import and instantiation worked!')"

        try {
            & "$env:pythonLocation\python.exe" -c $testImport
            Write-Host "✓ Critical import test passed - proceeding with full test suite"
        } catch {
            Write-Host "✗ Critical import failed - analyzing dependencies..."

            # Check for missing libpython DLL issue
            Write-Host "=== Python DLL Analysis ==="
            Write-Host "Python location: $env:pythonLocation"
            Write-Host "Looking for libpython3.12.dll in Python installation..."
            $pythonDll = Get-ChildItem "$env:pythonLocation" -Recurse -Filter "python*.dll" -ErrorAction SilentlyContinue
            if ($pythonDll) {
                Write-Host "Found Python DLLs:"
                $pythonDll | ForEach-Object { Write-Host "  $($_.FullName)" }

                # Copy Python DLL to package directory
                $pythonDll | ForEach-Object {
                    Write-Host "Copying $($_.Name) to package directory"
                    Copy-Item $_.FullName "src\rmnpy\" -Force -ErrorAction SilentlyContinue
                }
            } else {
                Write-Host "No Python DLLs found in $env:pythonLocation"
            }

            # Also check for missing libpython3.12.dll specifically
            Write-Host "Checking targeted locations for libpython3.12.dll..."
            $searchPaths = @(
                "$env:pythonLocation",
                "${{ runner.temp }}\msys64\mingw64\bin",
                "${{ runner.temp }}\msys64\mingw64\lib",
                "C:\hostedtoolcache\windows\Python"
            )

            $libpythonDlls = @()
            foreach ($searchPath in $searchPaths) {
                if (Test-Path $searchPath) {
                    $found = Get-ChildItem $searchPath -Filter "libpython3.12.dll" -Recurse -ErrorAction SilentlyContinue
                    $libpythonDlls += $found
                }
            }

            if ($libpythonDlls.Count -gt 0) {
                Write-Host "Found libpython3.12.dll:"
                $libpythonDlls | Select-Object -First 3 | ForEach-Object {
                    Write-Host "  $($_.FullName)"
                    Copy-Item $_.FullName "src\rmnpy\" -Force -ErrorAction SilentlyContinue
                }
            } else {
                Write-Host "libpython3.12.dll not found in targeted locations"
            }

            # Simplified dependency check
            Write-Host "=== Dependency Analysis ==="
            $pydFiles = Get-ChildItem -Path "src" -Filter "*.pyd" -Recurse
            ForEach ($pydFile in $pydFiles) {
                Write-Host "Checking dependencies for: $($pydFile.Name)"
                $objdumpPath = "${{ runner.temp }}\msys64\mingw64\bin\objdump.exe"
                if (Test-Path $objdumpPath) {
                    $dependencies = & $objdumpPath -p "$($pydFile.FullName)" 2>$null | Select-String "DLL Name"
                    ForEach ($dep in $dependencies) {
                        $dllName = ($dep -split ":")[1].Trim()
                        $locations = @("$mingwBin\$dllName", "$packageDir\$dllName", "$libDir\$dllName")
                        $found = $false
                        ForEach ($loc in $locations) {
                            if (Test-Path $loc) {
                                $found = $true
                                break
                            }
                        }
                        $status = if ($found) { "✓" } else { "✗ MISSING" }
                        Write-Host "    $status $dllName"
                    }
                }
            }

            # Try the import again after copying Python DLLs
            Write-Host "=== Retrying Import After DLL Fixes ==="
            try {
                & "$env:pythonLocation\python.exe" -c $testImport
                Write-Host "✓ Import succeeded after DLL fixes!"
            } catch {
                Write-Host "✗ Import still failing - will skip tests"
                Write-Host "This may be a fundamental compatibility issue with MinGW-compiled extensions on GitHub Actions Windows runner"
                exit 1
            }
        }        # Run the actual test suite with proper environment
        & "$env:pythonLocation\python.exe" -m pytest tests/ -v --cov=rmnpy --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint and style checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only the linting tools, not the full package
        python -m pip install black>=21.0.0 isort>=5.9.0 flake8>=3.9.0

    - name: Run black
      run: |
        python -m black --check --diff src/ tests/

    - name: Run isort
      run: |
        python -m isort --check-only --diff src/ tests/

    - name: Run flake8
      run: |
        python -m flake8 src/ tests/

  docs:
    name: Documentation build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev pandoc

    - name: Download OCTypes from GitHub releases
      run: |
        mkdir -p lib include/OCTypes
        LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/${LIB_FILE} -o octypes-lib.zip
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/libOCTypes-headers.zip -o octypes-headers.zip
        unzip -o -j -q octypes-lib.zip -d lib/
        unzip -o -j -q octypes-headers.zip -d include/OCTypes/
        rm octypes-lib.zip octypes-headers.zip

    - name: Download SITypes from GitHub releases
      run: |
        mkdir -p include/SITypes
        LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/${LIB_FILE} -o sitypes-lib.zip
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/libSITypes-headers.zip -o sitypes-headers.zip
        unzip -o -j -q sitypes-lib.zip -d lib/
        unzip -o -j -q sitypes-headers.zip -d include/SITypes/
        rm sitypes-lib.zip sitypes-headers.zip

    - name: Download RMNLib from GitHub releases
      run: |
        mkdir -p include/RMNLib
        LIB_FILE="libRMN-ubuntu-latest.x64.zip"
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/${LIB_FILE} -o rmnlib-lib.zip
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/libRMN-headers.zip -o rmnlib-headers.zip
        unzip -o -j -q rmnlib-lib.zip -d lib/
        unzip -o -j -q rmnlib-headers.zip -d include/RMNLib/
        rm rmnlib-lib.zip rmnlib-headers.zip

    - name: Verify downloaded libraries
      run: |
        ls -la lib/
        ls -la include/
        echo "✓ Libraries downloaded and ready for documentation build"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install documentation dependencies and build tools
        python -m pip install sphinx>=3.1.0 sphinx-rtd-theme>=0.5.2 breathe>=4.13.0 myst-parser>=0.15.0 sphinx-copybutton>=0.3.0 nbsphinx>=0.8.0
        python -m pip install Cython "numpy>=1.21,<2"

    - name: Build Cython extensions for docs
      run: |
        # Build extensions in-place so they can be imported by Sphinx
        python setup.py build_ext --inplace

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload docs artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
