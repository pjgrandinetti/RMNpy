name: CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          # Windows MinGW builds: MSYS2 only provides Python 3.12 for MinGW
          # Following SpinOps approach - exclude older Python versions on Windows
          - os: windows-latest
            python-version: "3.10"
          - os: windows-latest
            python-version: "3.11"

    steps:
    - name: Checkout RMNpy
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake pkg-config flex bison libopenblas-dev liblapacke-dev libcurl4-openssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake flex bison openblas lapack curl

    - name: Setup MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-python-pip
          mingw-w64-x86_64-curl
          mingw-w64-x86_64-openblas
          mingw-w64-x86_64-lapack
          mingw-w64-x86_64-make

    - name: Verify MSYS2 packages installation (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "=== Verifying MSYS2 package installation ==="

        # Check curl installation
        echo "Checking curl:"
        if pacman -Q mingw-w64-x86_64-curl; then
          echo "✓ curl package installed"
          find /mingw64 -name "*curl*.dll" | head -5
        else
          echo "✗ curl package NOT installed"
        fi

        # Check OpenBLAS installation
        echo -e "\nChecking OpenBLAS:"
        if pacman -Q mingw-w64-x86_64-openblas; then
          echo "✓ OpenBLAS package installed"
          find /mingw64 -name "*blas*.dll" | head -5
        else
          echo "✗ OpenBLAS package NOT installed"
        fi

        # Check LAPACK installation
        echo -e "\nChecking LAPACK:"
        if pacman -Q mingw-w64-x86_64-lapack; then
          echo "✓ LAPACK package installed"
          find /mingw64 -name "*lapack*.dll" | head -5
        else
          echo "✗ LAPACK package NOT installed"
        fi

        # List key DLL files we'll need
        echo -e "\n=== Key DLL files available ==="
        ls -la /mingw64/bin/libcurl*.dll 2>/dev/null || echo "No curl DLLs found"
        ls -la /mingw64/bin/libopenblas*.dll 2>/dev/null || echo "No OpenBLAS DLLs found"
        ls -la /mingw64/bin/liblapack*.dll 2>/dev/null || echo "No LAPACK DLLs found"

        # Check for Fortran libraries (gfortran variants)
        echo -e "\n=== Fortran libraries available ==="
        ls -la /mingw64/bin/libgfortran*.dll 2>/dev/null || echo "No libgfortran DLLs found"
        ls -la /mingw64/lib/libgfortran*.a 2>/dev/null || echo "No libgfortran static libs found"
        ls -la /mingw64/lib/libgcc_s*.a 2>/dev/null || echo "No libgcc_s static libs found"

        # List all Fortran-related libraries
        echo -e "\n=== All Fortran-related files ==="
        find /mingw64 -name "*fortran*" -o -name "*gfortran*" 2>/dev/null | head -10

        # Check specific library directory structure
        echo -e "\n=== MinGW64 library directory structure ==="
        ls -la /mingw64/lib/libgcc* 2>/dev/null || echo "No libgcc files found"
        ls -la /mingw64/lib/libgfortran* 2>/dev/null || echo "No libgfortran files found"
        ls -la /mingw64/lib/libwinpthread* 2>/dev/null || echo "No libwinpthread files found"
        ls -la /mingw64/lib/libquadmath* 2>/dev/null || echo "No libquadmath files found"

    - name: Add MinGW64 to PATH (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $mingw = "${{ runner.temp }}\msys64\mingw64\bin"
        "${mingw}" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append

    - name: Alias Python import library (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $pythonVersion = "${{ matrix.python-version }}"
        $versionNoDot = $pythonVersion.Replace(".", "")
        $lib = Join-Path $Env:RUNNER_TEMP "msys64\mingw64\lib\libpython$pythonVersion.dll.a"
        $dest = Join-Path $Env:RUNNER_TEMP "msys64\mingw64\lib\libpython$versionNoDot.dll.a"
        if (Test-Path $lib) { Copy-Item $lib $dest -Force }

    - name: Download OCTypes from GitHub releases
      run: |
        mkdir -p lib include/OCTypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libOCTypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libOCTypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libOCTypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/${LIB_FILE} -o octypes-lib.zip
        curl -L https://github.com/pjgrandinetti/OCTypes/releases/download/v0.1.0/libOCTypes-headers.zip -o octypes-headers.zip
        unzip -o -j -q octypes-lib.zip -d lib/
        unzip -o -j -q octypes-headers.zip -d include/OCTypes/
        rm octypes-lib.zip octypes-headers.zip
      shell: bash

    - name: Download SITypes from GitHub releases
      run: |
        mkdir -p include/SITypes
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libSITypes-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libSITypes-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libSITypes-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/${LIB_FILE} -o sitypes-lib.zip
        curl -L https://github.com/pjgrandinetti/SITypes/releases/download/v0.1.0/libSITypes-headers.zip -o sitypes-headers.zip
        unzip -o -j -q sitypes-lib.zip -d lib/
        unzip -o -j -q sitypes-headers.zip -d include/SITypes/
        rm sitypes-lib.zip sitypes-headers.zip
      shell: bash

    - name: Download RMNLib from GitHub releases
      run: |
        mkdir -p include/RMNLib
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          LIB_FILE="libRMN-ubuntu-latest.x64.zip"
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          LIB_FILE="libRMN-macos-latest.zip"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          LIB_FILE="libRMN-windows-latest.zip"
        fi
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/${LIB_FILE} -o rmnlib-lib.zip
        curl -L https://github.com/pjgrandinetti/RMNLib/releases/download/v0.1.0/libRMN-headers.zip -o rmnlib-headers.zip
        unzip -o -j -q rmnlib-lib.zip -d lib/
        unzip -o -j -q rmnlib-headers.zip -d include/RMNLib/
        rm rmnlib-lib.zip rmnlib-headers.zip
      shell: bash

    - name: Verify downloaded libraries
      run: |
        ls -la lib/
        ls -la include/
        echo "✓ Libraries downloaded and ready for Python build"
      shell: bash

    - name: Debug library downloads (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "=== Library Download Debug ==="
        Write-Host "Contents of lib directory:"
        Get-ChildItem lib -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  $($_.Name) - $($_.Length) bytes - Type: $($_.GetType().Name)"
        }

        Write-Host "Looking for DLL files specifically:"
        Get-ChildItem lib\*.dll -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  DLL: $($_.Name) - $($_.Length) bytes"
        }

        Write-Host "Looking for library files (.a, .lib):"
        Get-ChildItem lib\*.a, lib\*.lib -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "  LIB: $($_.Name) - $($_.Length) bytes"
        }

        # Analyze dependencies of compiled extensions
        Write-Host "=== Analyzing Extension Dependencies ==="
        if (Get-Command objdump -ErrorAction SilentlyContinue) {
          Write-Host "Using objdump to analyze dependencies..."
          Get-ChildItem "src\rmnpy\**\*.pyd" -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Dependencies for $($_.Name):"
            & objdump -p $_.FullName | Select-String "DLL Name:"
          }
        } else {
          Write-Host "objdump not available for dependency analysis"
        }

    - name: Install build tools
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip setuptools wheel Cython "numpy>=1.21,<2"

    - name: Install build tools (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        # Verify MinGW environment and compilers
        echo "=== MinGW Environment Verification ==="
        which gcc
        gcc --version
        which python
        python --version

        # Use MSYS2 Python with system package override for CI build
        echo "=== Installing Python build tools via MSYS2 ==="
        # Try to install numpy from MSYS2 package manager first
        pacman --noconfirm -S --needed mingw-w64-x86_64-python-numpy || echo "Numpy package not available, will use pip"

        # Install remaining tools via pip with system override
        python -m pip install --break-system-packages --upgrade pip setuptools wheel Cython

    - name: Build Cython extension in-place (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      env:
        CC: x86_64-w64-mingw32-gcc
        CXX: x86_64-w64-mingw32-g++
        LDFLAGS: "-L/mingw64/lib"
        LIBS: "-lcurl -lopenblas -llapack"
      run: |
        # Verify environment
        echo "=== Build Environment ==="
        echo "CC: $CC"
        echo "CXX: $CXX"
        echo "LDFLAGS: $LDFLAGS"
        echo "LIBS: $LIBS"
        which gcc
        which python
        python --version

        # Build C extensions using MSYS2 Python with MinGW compiler
        python setup.py build_ext --inplace

    - name: Copy runtime DLLs (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $mingw = "${{ runner.temp }}\msys64\mingw64\bin"
        # Copy runtime DLLs to main package directory (SpinOps approach)
        $targetDir = "src/rmnpy"
        if (Test-Path $targetDir) {
          Write-Host "Copying DLLs to main package directory: $targetDir"

          # Copy MinGW runtime DLLs
          Copy-Item "$mingw\libgcc_s_seh-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libwinpthread-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libstdc++-6.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libgomp-1.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libquadmath-0.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\libgfortran-5.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy curl DLLs (required by RMNLib)
          Write-Host "Copying curl dependencies..."
          Copy-Item "$mingw\libcurl-4.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy OpenBLAS DLLs (required by RMNLib)
          Write-Host "Copying OpenBLAS dependencies..."
          Copy-Item "$mingw\libopenblas.dll" $targetDir\ -Force -ErrorAction SilentlyContinue
          Copy-Item "$mingw\liblapack.dll" $targetDir\ -Force -ErrorAction SilentlyContinue

          # Copy Python runtime DLL
          Write-Host "Copying Python runtime DLL..."
          $pythonDll = Get-ChildItem "$env:pythonLocation" -Filter "python*.dll" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($pythonDll) {
            Write-Host "  Found Python DLL: $($pythonDll.Name)"
            Copy-Item $pythonDll.FullName $targetDir\ -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "  No Python DLL found in $env:pythonLocation"
          }

          # Rename compiled extension modules to remove version suffix for imports
          Write-Host "Renaming compiled modules to base names for Python imports..."
          $pattern = [regex]'\.cp\d+-win_amd64'
          # Rename all compiled extension modules under target directory
          Get-ChildItem "$targetDir" -Recurse -Filter "*.pyd" | ForEach-Object {
            $newName = $_.Name -replace $pattern, ''
            if ($newName -ne $_.Name) { Rename-Item $_.FullName -NewName $newName -Force }
          }
        } else {
          Write-Host "Main package directory not found: $targetDir"
        }

    - name: Install Python dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        python -m pip install -e .[test]

    - name: Install Python dependencies (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        # Use MSYS2 Python with system package override for our project
        echo "=== Installing Python dependencies using MSYS2 Python ==="

        # Install test dependencies via pacman where possible
        echo "Installing test dependencies via pacman..."
        pacman --noconfirm -S --needed mingw-w64-x86_64-python-pytest || echo "pytest not available via pacman"
        pacman --noconfirm -S --needed mingw-w64-x86_64-python-pytest-cov || echo "pytest-cov not available via pacman"
        pacman --noconfirm -S --needed mingw-w64-x86_64-python-pytest-xdist || echo "pytest-xdist not available via pacman"
        pacman --noconfirm -S --needed mingw-w64-x86_64-python-pytest-benchmark || echo "pytest-benchmark not available via pacman"

        # Install remaining dependencies via pip with system override
        echo "Installing remaining dependencies via pip..."
        python -m pip install --break-system-packages --upgrade pip setuptools wheel
        python -m pip install --break-system-packages Cython
        python -m pip install --break-system-packages pytest pytest-cov pytest-xdist pytest-benchmark

        # Install our project without test dependencies first (to avoid numpy build issues)
        echo "Installing project without test dependencies..."
        python -m pip install --break-system-packages -e . --no-deps

        # Verify installation
        echo "Verifying installation..."
        python -c "import rmnpy; print('RMNpy installed successfully')"

    - name: Generate constants (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        make generate-constants

    - name: Generate constants (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        # Constants are generated during the Python build process as constants.pyx
        # Check for the generated constants file
        echo "Checking for generated constants..."
        if [ -f "src/rmnpy/constants.pyx" ]; then
          echo "✓ Constants file exists: src/rmnpy/constants.pyx"
          head -10 "src/rmnpy/constants.pyx"
        else
          echo "⚠ Constants file not found - running manual generation"
          # Manually run the constants generation using MSYS2 Python
          python scripts/extract_si_constants.py
        fi
        echo "Constants generation check completed"

    - name: Test basic imports (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "=== Testing Basic Imports ==="
        echo "Python version:"
        python --version

        echo "Testing numpy import..."
        python -c "import numpy; print('Numpy version: ' + numpy.__version__)"
        echo "✓ Numpy import successful"

        echo "Testing RMNpy import..."
        python -c "import rmnpy; print('RMNpy imported successfully')"
        echo "✓ RMNpy import successful"

        echo "✓ All import tests passed"

    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        echo "=== Running Full Test Suite ==="
        python -m pytest --maxfail=1 --disable-warnings -q
